[% WRAPPER layout.tt title="Overview" handlesLayout=1 %]

<div class="page-title">
  <h1>Overview</h1>
</div>

<section class="overview-description">
  Step on a journey to explore and learn why so many developer, system
  administrators and other enthusiasts use Nix and can not imagine the world
  without it.
</section>

<section class="overview-benefits">

  <div>
    <!-- sparkles, success, joy, for developers -->
    [% PROCESS svg path="site-styles/assets/gfx-overview-cloud.svg" %]
    <div>
      <h2>Always working development environment.</h2>
      <!--
      <h2>Never breaking development environment.</h2>
      <h2>Complete development environment.</h2>
      <h2>Complete and consistent development environment.</h2>
      -->
      <p>
        With Nix every developer will enter a
        <strong>complete and consistent development environment</strong>.
        Stop worrying how to install dependencies for your project.
      </p>
      <ul>
        <!-- TODO: this should be links to a more detailed explanation
                   in which we should explain how it works? and why it works
                   the way it is works?
        -->
        <li>complete dependencies</li>
        <li>build sandbox</li>
      </ul>
      <div>
        <p>
          Under Nix, a build process will only find resources that have been
          declared explicitly as dependencies. There is no way it can build
          until everything it needs has been correctly declared. If it builds,
          you will know you've provided a complete declaration.
        </p>
        <p>
          The same build process specification is than used to provide
          development environment. With successful build, we can guarantee that
          everything needed to building the project is available to the
          developer. Even more, some additional development tools can be added
          to assist the development.
        </p>
        <p>
          Long are gone the days developers saying:
          <strong>But it works on my machine!</strong>
        </p>
      </div>
    </div>
  </div>

  <div>
    <!-- collaboration, sharing -->
    [% PROCESS svg path="site-styles/assets/gfx-overview-gears.svg" %]
    <div>
      <h2>
        <!-- TODO: missing the emotional part
        -->
        One tool, many languages, many more projects.
      </h2>
      <p>
        With today's polyglot development environments, each language has its
        own way of building and testing.
        <strong>Encourage cross-team development</strong>
        by providing a single way of building everything.
      </p>
      <ul>
        <li>language agnostic</li>
        <li>multiple versions</li>
        <li>portable</li>
      </ul>
      <div>
        <p>
          Keeping the project README up to date with the latest working version
          of how to install system dependencies for you project is a never
          ending task. Nix allows you to specify your system dependencies
          alongside your project dependencies. Development environment is one
          simple command away, all you need to run is
          <code>nix-shell</code>.
        </p>
        <p>
          Multiple versions or variants of a package can be installed at the
          same time without a problem. This is important when different
          projects have dependencies on different versions of the same package
          — <strong>Nix prevents the “DLL hell”</strong>.
        </p>
      </div>
    </div>
  </div>

  <div>
    [% PROCESS svg path="site-styles/assets/gfx-overview-looking.svg" %]
    <div>
      <h2>
        Either it works or fails always in the same way.
      </h2>
      <p>
        With Nix there are two results: the code either works or fails always
        in the same way. This gives you the power to reproduce (and avoid) any
        build related bugs.
      </p>
      <ul>
        <li>reproducibility</li>
        <li>transparent source binary model</li>
        <li>nix language</li>
      </ul>
      <div>
        <p>
          Build instructions are written in Nix language, which allows you to
          extend or change existing build instruction in any way you wish. This
          makes Nix a power build tool that can be used in both simple and
          complex project.
        </p>
        <p>
          Building and running tests locally or in your CI would always result
          in the same failure or guarantee success. This is because environment
          is always shared wherever your run it with Nix.
        </p>
      </div>
    </div>
  </div>

  <div>
    [% PROCESS svg path="site-styles/assets/gfx-overview-gears.svg" %]
    <div>
      <h2>
        Is the previous version better? Rollback anytime.
      </h2>
      <p>
        Packages are never overwritten, and old versions are always stored.
        Rollback to any previous version within milliseconds.
      </p>
      <ul>
        <li>generations</li>
        <li>garbage collection</li>
        <li>atomic</li>
        <li>nix store</li>
      </ul>
      <div>
        <p>
          profiles, generations, garbage collection
        </p>
      </div>
    </div>
  </div>

  <div>
    <!-- hacking, fun, party -->
    [% PROCESS svg path="site-styles/assets/gfx-overview-gears.svg" %]
    <div>
      <h2>
        <!-- TODO: "have fun" can be interpreted in the wrong way.
                   need to check with somebody english native
        -->
        It is important to have fun.
      </h2>
      <ul>
        <li>generations</li>
        <li>nix store</li>
      </ul>
      <p>
        We don't stop playing, because we grow old; we grow old because we stop
        playing - George Bernard Shaw.
        Use tools that allow you to play with different software as
        you did when the job wasn't waiting for you the next day.
      </p>
      <div>
        <p>
          Install new software with no risk of breaking anything down. Nix
          prevents conflicts not only between multiple development environments,
          but also with the operating system. You work environment will stay
          intact, but allow you to experiment.
        </p>
        <p>
          We could write that because of Nix you will become a better
          programmer. You probably will, just because you will be able to
          expose yourself to more software. But none of this is relevant.
          The most important thing is to have fun.
          <strong>Without it, we get sick.</strong>
        </p>
      </div>
    </div>
  </div>

  <div>
    [% PROCESS svg path="site-styles/assets/gfx-overview-cloud.svg" %]
    <div>
      <h2>
        From zero to cloud.
      </h2>
      <ul>
        <li>cloud images</li>
        <li>docker images</li>
        <li>devops</li>
      </ul>
      <p>
        Use the same tool to build one project or even one hundred projects,
        configure machines and deploy to the cloud. Thanks to the extensible
        Nix language, it's easy to compose parts together with little overhead.
      </p>
      <div>
        <p>
          Using one tool to build Amazon EC2, Google Cloud, Azure, Virtualbox,
          KVM and other images in a declarative way.
          You can then deploy them with the tools you already know and use.
        </p>
        <p>
          Nix takes building docker images to the next level. Forget
          <code>Dockerfile</code> and have a peace of mind with declarative
          approach that Nix gives you. Automatically calculate the best
          layer structure for your docker image and build minimal images
          that include only software that is needed for you project. Nix and
          Docker is a match made in heaven.
        </p>
      </div>
    </div>
  </div>

  <div>
    [% PROCESS svg path="site-styles/assets/gfx-overview-gears.svg" %]
    <div>
      <h2>
        No surprises. Trust in your deployments.
      </h2>
      <p>
        Surprises only belong to birthdays, not deployments.
        With Nix there are only two possible outcomes.
        Your system was successfully upgraded or upgrade did not happen.
      </p>
      <ul>
        <li>nixos</li>
        <li>atomic</li>
        <li>generations</li>
      </ul>
      <div>
        <p>
          Nix will never leave your system in an unknown state. It puts you in
          a complete control. The upgrade to new version of the system is
          atomic, meaning that there is no point in time where your system
          could be in a broken state. Some call it magic, Nix users call it a
          thing that they can not leave without.
        </p>
      </div>
    </div>
  </div>

</section>

[% END %]
