<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
	<title>NixOS Planet</title>
	<link>https://planet.nixos.org</link>
	<language>en</language>
	<description>NixOS Planet - https://planet.nixos.org</description>
	<atom:link rel="self" href="https://planet.nixos.org/rss20.xml" type="application/rss+xml"/>

<item>
	<title>nixbuild.net: Finding Non-determinism with nixbuild.net</title>
	<guid isPermaLink="true">https://blog.nixbuild.net/posts/2021-01-13-finding-non-determinism-with-nixbuild-net.html</guid>
	<link>https://blog.nixbuild.net/posts/2021-01-13-finding-non-determinism-with-nixbuild-net.html</link>
	<description>&lt;p&gt;During the last decade, many initiatives focussing on making builds reproducible have gained momentum. &lt;a href=&quot;https://reproducible-builds.org/&quot;&gt;reproducible-builds.org&lt;/a&gt; is a great resource for anyone interested in how the work progresses in multiple software communities. &lt;a href=&quot;https://r13y.com/&quot;&gt;r13y.com&lt;/a&gt; tracks the current reproducibility metrics in &lt;a href=&quot;https://nixos.org/&quot;&gt;NixOS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nix is particularly suited for working on reproducibility, since it by design isolates builds and comes with &lt;a href=&quot;https://nixos.org/manual/nix/stable/#chap-diff-hook&quot;&gt;tools&lt;/a&gt; for finding non-determinism. The Nix community also works on related projects, like &lt;a href=&quot;https://www.tweag.io/blog/2020-12-16-trustix-announcement/&quot;&gt;Trustix&lt;/a&gt; and the &lt;a href=&quot;https://www.tweag.io/blog/2020-09-10-nix-cas/&quot;&gt;content-addressed store&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This blog post summarises how &lt;a href=&quot;https://nixbuild.net/&quot;&gt;nixbuild.net&lt;/a&gt; can be useful for finding non-deterministic builds, and announces a new feature related to reproducibility!&lt;/p&gt;

&lt;h2 id=&quot;repeated-builds&quot;&gt;Repeated Builds&lt;/h2&gt;
&lt;p&gt;The way to find non-reproducible builds is to run the same build multiple times and check for any difference in results, when compared bit-for-bit. Since Nix guarantees that all inputs will be identical between the runs, just finding differing output results is enough to conclude that a build is non-deterministic. Of course, we can never &lt;em&gt;prove&lt;/em&gt; that a build is &lt;em&gt;deterministic&lt;/em&gt; this way, but if we run the build many times, we gain a certain confidence in it.&lt;/p&gt;
&lt;p&gt;To run a Nix build multiple times, simply add the &lt;a href=&quot;https://nixos.org/manual/nix/stable/#conf-repeat&quot;&gt;–repeat&lt;/a&gt; option to your build command. It will run your build the number of extra times you specify.&lt;/p&gt;
&lt;p&gt;Suppose we have the following Nix expression in &lt;code&gt;deterministic.nix&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let
  inherit (import &amp;lt;nixpkgs&amp;gt; {}) runCommand;
in {
  stable = runCommand &quot;stable&quot; {} ''
    touch $out
  '';

  unstable = runCommand &quot;unstable&quot; {} ''
    echo $RANDOM &amp;gt; $out
  '';
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can run repeated builds like this (note that the &lt;code&gt;--builders &quot;&quot;&lt;/code&gt; option is there to force a local build, to not use nixbuild.net):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nix-build deterministic.nix --builders &quot;&quot; -A stable --repeat 1
these derivations will be built:
  /nix/store/0fj164aqyhsciy7x97s1baswygxn8lzf-stable.drv
building '/nix/store/0fj164aqyhsciy7x97s1baswygxn8lzf-stable.drv' (round 1/2)...
building '/nix/store/0fj164aqyhsciy7x97s1baswygxn8lzf-stable.drv' (round 2/2)...
/nix/store/6502c5490rap0c8dhvfwm5rhi22i9clz-stable

$ nix-build deterministic.nix --builders &quot;&quot; -A unstable --repeat 1
these derivations will be built:
  /nix/store/psmn1s3bb97989w5a5b1gmjmprqcmf0k-unstable.drv
building '/nix/store/psmn1s3bb97989w5a5b1gmjmprqcmf0k-unstable.drv' (round 1/2)...
building '/nix/store/psmn1s3bb97989w5a5b1gmjmprqcmf0k-unstable.drv' (round 2/2)...
output '/nix/store/g7a5sf7iwdxs7q12ksrzlvjvz69yfq3l-unstable' of '/nix/store/psmn1s3bb97989w5a5b1gmjmprqcmf0k-unstable.drv' differs from previous round
error: build of '/nix/store/psmn1s3bb97989w5a5b1gmjmprqcmf0k-unstable.drv' failed&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running repeated builds on nixbuild.net works exactly the same way:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nix-build deterministic.nix -A stable --repeat 1
these derivations will be built:
  /nix/store/wnd5y30jp3xwpw1bhs4bmqsg5q60vc8i-stable.drv
building '/nix/store/wnd5y30jp3xwpw1bhs4bmqsg5q60vc8i-stable.drv' (round 1/2) on 'ssh://eu.nixbuild.net'...
copying 1 paths...
copying path '/nix/store/z3wlpwgz66ningdbggakqpvl0jp8bp36-stable' from 'ssh://eu.nixbuild.net'...
/nix/store/z3wlpwgz66ningdbggakqpvl0jp8bp36-stable

$ nix-build deterministic.nix -A unstable --repeat 1
these derivations will be built:
  /nix/store/6im1drv4pklqn8ziywbn44vq8am977vm-unstable.drv
building '/nix/store/6im1drv4pklqn8ziywbn44vq8am977vm-unstable.drv' (round 1/2) on 'ssh://eu.nixbuild.net'...
[nixbuild.net] output '/nix/store/srch6l8pyl7z93c7gp1xzf6mq6rwqbaq-unstable' of '/nix/store/6im1drv4pklqn8ziywbn44vq8am977vm-unstable.drv' differs from previous round
error: build of '/nix/store/6im1drv4pklqn8ziywbn44vq8am977vm-unstable.drv' on 'ssh://eu.nixbuild.net' failed: build was non-deterministic
builder for '/nix/store/6im1drv4pklqn8ziywbn44vq8am977vm-unstable.drv' failed with exit code 1
error: build of '/nix/store/6im1drv4pklqn8ziywbn44vq8am977vm-unstable.drv' failed&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the log output differs slightly between the local and the remote builds. This is because when Nix submits a remote build, it will not do the determinism check itself, instead it will leave it up to the builder (nixbuild.net in our case). This is actually a good thing, because it allows nixbuild.net to perform some optimizations for repeated builds. The following sections will enumerate those optimizations.&lt;/p&gt;
&lt;h2 id=&quot;finding-non-determinism-in-past-builds&quot;&gt;Finding Non-determinism in Past Builds&lt;/h2&gt;
&lt;p&gt;If you locally try to rebuild a something that has failed due to non-determinism, Nix will build it again at least two times (due to &lt;code&gt;--repeat&lt;/code&gt;) and fail it due to non-determinism again, since it keeps no record of the previous build failure (other than the build log).&lt;/p&gt;
&lt;p&gt;However, nixbuild.net keeps a record of every build performed, also for repeated builds. So when you try to build the same derivation again, nixbuild.net is smart enough to look at its past build and figure out that the derivation is non-deterministic without having to rebuild it. We can demonstrate this by re-running the last build from the example above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nix-build deterministic.nix -A unstable --repeat 1
these derivations will be built:
  /nix/store/6im1drv4pklqn8ziywbn44vq8am977vm-unstable.drv
building '/nix/store/6im1drv4pklqn8ziywbn44vq8am977vm-unstable.drv' (round 1/2) on 'ssh://eu.nixbuild.net'...
[nixbuild.net] output '/nix/store/srch6l8pyl7z93c7gp1xzf6mq6rwqbaq-unstable' of '/nix/store/6im1drv4pklqn8ziywbn44vq8am977vm-unstable.drv' differs from previous round
error: build of '/nix/store/6im1drv4pklqn8ziywbn44vq8am977vm-unstable.drv' on 'ssh://eu.nixbuild.net' failed: a previous build of the derivation was non-deterministic
builder for '/nix/store/6im1drv4pklqn8ziywbn44vq8am977vm-unstable.drv' failed with exit code 1
error: build of '/nix/store/6im1drv4pklqn8ziywbn44vq8am977vm-unstable.drv' failed&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the exact same derivation fails again, but now the build status message says: &lt;code&gt;a previous build of the derivation was non-deterministic&lt;/code&gt;. This means nixbuild.net didn’t have to run the build, it just checked its past outputs for the derivation and noticed they differed.&lt;/p&gt;
&lt;p&gt;When nixbuild.net looks at past builds it considers all outputs that have been signed by a key that the account trusts. That means that it can even compare outputs that have been fetched by substitution.&lt;/p&gt;
&lt;h2 id=&quot;scaling-out-repeated-builds&quot;&gt;Scaling Out Repeated Builds&lt;/h2&gt;
&lt;p&gt;When you use &lt;code&gt;--repeat&lt;/code&gt;, nixbuild.net will create multiple copies of the build and schedule all of them like any other build would have been scheduled. This means that every repeated build will run in parallel, saving time for the user. As soon as nixbuild.net has found proof of non-determinism, any repeated build still running will be cancelled.&lt;/p&gt;
&lt;h2 id=&quot;provoking-non-determinism-through-filesystem-randomness&quot;&gt;Provoking Non-determinism through Filesystem Randomness&lt;/h2&gt;
&lt;p&gt;As promised in the beginning of this blog post, we have new a feature to announce! nixbuild.net is now able to inject randomness into the filesystem that the builds see when they run. This can be used to provoke builds to uncover non-deterministic behavior.&lt;/p&gt;
&lt;p&gt;The idea is not new, it is in fact the exact same concept as have been implemented in the &lt;a href=&quot;https://salsa.debian.org/reproducible-builds/disorderfs&quot;&gt;disorderfs&lt;/a&gt; project by &lt;a href=&quot;https://reproducible-builds.org/&quot;&gt;reproducible-builds.org&lt;/a&gt;. However, we’re happy to make it easily accessible to nixbuild.net users. The feature is disabled by default, but can be enabled through a new &lt;a href=&quot;https://docs.nixbuild.net/settings/#inject-fs-randomness&quot;&gt;user setting&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the moment, the implementation will return directory entries in a random order when enabled. In the future we might inject more metadata randomness.&lt;/p&gt;
&lt;p&gt;To demonstrate this feature, let’s use this build:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let
  inherit (import &amp;lt;nixpkgs&amp;gt; {}) runCommand;
in rec {
  files = runCommand &quot;files&quot; {} ''
    mkdir $out
    touch $out/{1..10}
  '';

  list = runCommand &quot;list&quot; {} ''
    ls -f ${files} &amp;gt; $out
  '';
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;files&lt;/code&gt; build just creates ten empty files as its output, and the &lt;code&gt;list&lt;/code&gt; build lists those file with &lt;code&gt;ls&lt;/code&gt;. The &lt;code&gt;-f&lt;/code&gt; option of &lt;code&gt;ls&lt;/code&gt; disables sorting entirely, so the file names will be printed in the order the filesystem returns them. This means that the build output will depend on how the underlying filesystem is implemented, which could be considered a non-deterministic behavior.&lt;/p&gt;
&lt;p&gt;First, we build it locally with &lt;code&gt;--repeat&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nix-build non-deterministic-fs.nix --builders &quot;&quot; -A list --repeat 1
these derivations will be built:
  /nix/store/153s3ir379cy27wpndd94qlfhz0wj71v-list.drv
building '/nix/store/153s3ir379cy27wpndd94qlfhz0wj71v-list.drv' (round 1/2)...
building '/nix/store/153s3ir379cy27wpndd94qlfhz0wj71v-list.drv' (round 2/2)...
/nix/store/h1591y02qff8vls5v41khgjz2zpdr2mg-list&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the build succeeded. Then we delete the result from our Nix store so we can run the build again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm result
nix-store --delete /nix/store/h1591y02qff8vls5v41khgjz2zpdr2mg-list&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We enable the &lt;code&gt;inject-fs-randomness&lt;/code&gt; feature through the &lt;a href=&quot;https://docs.nixbuild.net/nixbuild-shell/&quot;&gt;nixbuild.net shell&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nixbuild.net&amp;gt; set inject-fs-randomness true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we run the build (with &lt;code&gt;--repeat&lt;/code&gt;) on nixbuild.net:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nix-build non-deterministic-fs.nix -A list --repeat 1
these derivations will be built:
  /nix/store/153s3ir379cy27wpndd94qlfhz0wj71v-list.drv
building '/nix/store/153s3ir379cy27wpndd94qlfhz0wj71v-list.drv' (round 1/2) on 'ssh://eu.nixbuild.net'...
copying 1 paths...
copying path '/nix/store/vl13q40hqp4q8x6xjvx0by06s1v9g3jy-files' to 'ssh://eu.nixbuild.net'...
[nixbuild.net] output '/nix/store/h1591y02qff8vls5v41khgjz2zpdr2mg-list' of '/nix/store/153s3ir379cy27wpndd94qlfhz0wj71v-list.drv' differs from previous round
error: build of '/nix/store/153s3ir379cy27wpndd94qlfhz0wj71v-list.drv' on 'ssh://eu.nixbuild.net' failed: build was non-deterministic
builder for '/nix/store/153s3ir379cy27wpndd94qlfhz0wj71v-list.drv' failed with exit code 1
error: build of '/nix/store/153s3ir379cy27wpndd94qlfhz0wj71v-list.drv' failed&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, nixbuild.net found the non-determinism! We can double check that the directory entries are in a random order by running without &lt;code&gt;--repeat&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nix-build non-deterministic-fs.nix -A list
these derivations will be built:
  /nix/store/153s3ir379cy27wpndd94qlfhz0wj71v-list.drv
building '/nix/store/153s3ir379cy27wpndd94qlfhz0wj71v-list.drv' on 'ssh://eu.nixbuild.net'...
copying 1 paths...
copying path '/nix/store/h1591y02qff8vls5v41khgjz2zpdr2mg-list' from 'ssh://eu.nixbuild.net'...
/nix/store/h1591y02qff8vls5v41khgjz2zpdr2mg-list

$ cat /nix/store/h1591y02qff8vls5v41khgjz2zpdr2mg-list
6
1
2
5
10
7
8
..
9
4
3
.&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;future-work&quot;&gt;Future Work&lt;/h2&gt;
&lt;p&gt;There are lots of possibilities to improve the utility of nixbuild.net when it comes to reproducible builds. Your feedback and ideas are very welcome to &lt;a href=&quot;mailto:support@nixbuild.net&quot;&gt;support@nixbuild.net&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some of the things that could be done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make it possible to trigger repeated builds for any previous build, without submitting a new build with Nix. For example, there could be a command in the nixbuild.net shell allowing a user to trigger a repeated build and report back any non-determinism issues.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement functionality similar to &lt;a href=&quot;https://diffoscope.org/&quot;&gt;diffoscope&lt;/a&gt; to be able to find out exactly what differs between builds. This could be available as a shell command or through an API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make it possible to download specific build outputs. The way Nix downloads outputs (and stores them locally) doesn’t allow for having multiple variants of the same output, but nixbuild.net could provide this functionality through the shell or an API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inject more randomness inside the sandbox. Since we have complete control over the sandbox environment we can introduce more differences between repeated builds to provoke non-determinism. For example, we can schedule builds on different hardware or use different kernels between repeated builds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add support for listing known non-deterministic derivations.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
	<author>support@nixbuild.net (nixbuild.net)</author>
</item>
<item>
	<title>nixbuild.net: The First Year</title>
	<guid isPermaLink="true">https://blog.nixbuild.net/posts/2020-12-29-the-first-year.html</guid>
	<link>https://blog.nixbuild.net/posts/2020-12-29-the-first-year.html</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://discourse.nixos.org/t/announcing-nixbuild-net-nix-build-as-a-service&quot;&gt;One year ago&lt;/a&gt; nixbuild.net was announced to the Nix community for the very first time. The service then ran as a closed beta for 7 months until it was made &lt;a href=&quot;https://blog.nixbuild.net/posts/2020-08-28-nixbuild-net-is-generally-available.html&quot;&gt;generally available&lt;/a&gt; on the 28th of August 2020.&lt;/p&gt;
&lt;p&gt;This blog post will try to summarize how nixbuild.net has evolved since GA four months ago, and give a glimpse of the future for the service.&lt;/p&gt;

&lt;h2 id=&quot;stability-and-performance&quot;&gt;Stability and Performance&lt;/h2&gt;
&lt;p&gt;Thousands of Nix builds have been built by nixbuild.net so far, and every build helps in making the service more reliable by uncovering possible edge cases in the build environment.&lt;/p&gt;
&lt;p&gt;These are some of the stability-related improvements and fixes that have been deployed since GA:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Better detection and handling of builds that time out or hang.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improved retry logic should our backend storage not deliver Nix closures as expected.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fixes to the virtual file system inside the KVM sandbox.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better handling of builds that have binary data in their log output.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changes to the virtual sandbox environment so it looks even more like a “standard” Linux environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Application of the &lt;a href=&quot;https://nixos.org/manual/nix/stable/#conf-sandbox&quot;&gt;Nix sandbox&lt;/a&gt; inside our KVM sandbox. This basically guarantees that the Nix environment provided through nixbuild.net is identical to the Nix environment for local builds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support for following HTTP redirects from binary caches.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;even-better-build-reuse&quot;&gt;Even Better Build Reuse&lt;/h2&gt;
&lt;p&gt;One of the fundamental ideas in nixbuild.net is to try as hard as possible to &lt;em&gt;not&lt;/em&gt; build your builds, if an existing build result can be reused instead. We can trivially reuse an account’s own builds since they are implicitly trusted by the user, but also untrusted builds can be reused under certain circumstances. This has been described in detail in an &lt;a href=&quot;https://blog.nixbuild.net/posts/2020-08-13-build-reuse-in-nixbuild-net.html&quot;&gt;earlier blog post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since GA we’ve introduced a number of new ways build results can be reused.&lt;/p&gt;
&lt;h3 id=&quot;reuse-of-build-failures&quot;&gt;Reuse of Build Failures&lt;/h3&gt;
&lt;p&gt;Build failures are now also reused. This means that if someone tries to build a build that is identical (in the sense that the derivation and its transitive input closure is bit-by-bit identical) to a previously failed build, nixbuild.net will immediately serve back the failed result instead of re-running the build. You will even get the build log replayed.&lt;/p&gt;
&lt;p&gt;Build failures can be reused since we are confident that our sandbox is pure, meaning that it will behave exactly the same as long as the build is exactly the same. Only non-transient failures will be reused. So if the builder misbehaves in some way that is out of control for Nix, that failure will not be reused. This can happen if the builder machine breaks down or something similar. In such cases we will automatically re-run the build anyway.&lt;/p&gt;
&lt;p&gt;When we fix bugs or make major changes in our sandbox it can happen that we alter the behavior in terms of which builds succeed or fail. For example, we could find a build that fail just because we have missed implementing some specific detail in the sandbox. Once that is fixed, we don’t want to reuse such failures. To avoid that, all existing build failures will be “invalidated” on each major update of the sandbox.&lt;/p&gt;
&lt;p&gt;If a user really wants to re-run a failed build on nixbuild.net, failure reuse can be turned off using the new &lt;em&gt;user settings&lt;/em&gt; (see below).&lt;/p&gt;
&lt;h3 id=&quot;reuse-of-build-timeouts&quot;&gt;Reuse of Build Timeouts&lt;/h3&gt;
&lt;p&gt;In a similar vein to reused build failures, we can also reuse build timeouts. This is not enabled by default, since users can select different timeout limits. A user can activate reuse of build timeouts through the user settings.&lt;/p&gt;
&lt;p&gt;The reuse of timed out builds works like this: Each time a new build is submitted, we check if we have any previous build results of the exact same build. If no successful results or plain failures are found, we look for builds that have timed out. We then check if any of the existing timed out builds ran for longer than the user-specified timeout for the new build. If we can find such a result, it will be served back to the user instead of re-running the build.&lt;/p&gt;
&lt;p&gt;This feature can be very useful if you want to avoid re-running builds that timeout over and over again (which can be a very time-consuming excercise). For example, say that you have your build timeout set to two hours, and some input needed for a build takes longer than that to build. The first time that input is needed you have to wait two hours to detect that the build will fail. If you then try building something else that happens to depend on the very same input you will save two hours by directly being served the build failure from nixbuild.net!&lt;/p&gt;
&lt;h3 id=&quot;wait-for-running-builds&quot;&gt;Wait for Running Builds&lt;/h3&gt;
&lt;p&gt;When a new build is submitted, nixbuild.net will now check if there is any identical build currently running (after checking for previous build results or failures). If there is, the new build will simply hold until the running build has finished. After that, the result of the running build will likely be served back as the result of the new build (as long as the running build wasn’t terminated in a transient way, in which case the new build will have to run from scratch). The identical running builds are checked and reused across accounts.&lt;/p&gt;
&lt;p&gt;Before this change, nixbuild.net would simply start another build in parallel even if the builds were identical.&lt;/p&gt;
&lt;h2 id=&quot;new-features&quot;&gt;New Features&lt;/h2&gt;
&lt;h3 id=&quot;user-settings&quot;&gt;User Settings&lt;/h3&gt;
&lt;p&gt;A completely new feature has been launched since GA: &lt;strong&gt;&lt;a href=&quot;https://docs.nixbuild.net/settings/&quot;&gt;User Settings&lt;/a&gt;&lt;/strong&gt;. This allows end users to tweak the behavior of nixbuild.net. For example, the build reuse described above can be controlled by user settings. Other settings includes &lt;a href=&quot;https://docs.nixbuild.net/settings/#max-cpu-hours-per-month&quot;&gt;controlling the maximum used build time per month&lt;/a&gt;, and the possibility to &lt;a href=&quot;https://docs.nixbuild.net/settings/#allow-override&quot;&gt;lock down&lt;/a&gt; specific SSH keys which is useful in CI setups.&lt;/p&gt;
&lt;p&gt;The user settings can be set in various way; through the &lt;a href=&quot;https://docs.nixbuild.net/nixbuild-shell/index.html#configure-settings&quot;&gt;nixbuild.net shell&lt;/a&gt;, the &lt;a href=&quot;https://docs.nixbuild.net/settings/#ssh-environment&quot;&gt;SSH client environment&lt;/a&gt; and even through the &lt;a href=&quot;https://docs.nixbuild.net/settings/#nix-derivation&quot;&gt;Nix derivations&lt;/a&gt; themselves.&lt;/p&gt;
&lt;p&gt;Even if many users probably never need to change any settings, it can be helpful to read through the &lt;a href=&quot;https://docs.nixbuild.net/settings/&quot;&gt;documentation&lt;/a&gt; to get a feeling for what is possible. If you need to differentiate permissions in any way (different settings for account administrators, developers, CI etc) you should definitely look into the various user settings.&lt;/p&gt;
&lt;h3 id=&quot;github-ci-action&quot;&gt;GitHub CI Action&lt;/h3&gt;
&lt;p&gt;A &lt;a href=&quot;https://github.com/marketplace/actions/nixbuild-net&quot;&gt;GitHub Action&lt;/a&gt; has been published. This action makes it very easy to use nixbuild.net as a remote Nix builder in your GitHub Actions workflows. Instead of running you Nix builds on the two vCPUs provided by GitHub you can now enjoy scale-out Nix builds on nixbuild.net with minimal setup required.&lt;/p&gt;
&lt;p&gt;The nixbuild.net GitHub Action is developed by the nixbuild.net team and there are plans on adding more functionality that nixbuild.net can offer users, like automatically generated cost and performance reports for your Nix builds.&lt;/p&gt;
&lt;h3 id=&quot;shell-improvements&quot;&gt;Shell Improvements&lt;/h3&gt;
&lt;p&gt;Various minor improvements have been made to the &lt;a href=&quot;https://docs.nixbuild.net/nixbuild-shell/&quot;&gt;nixbuild.net shell&lt;/a&gt;. It is for example now much easier to get an overview on how large your next invoice will be, through the &lt;a href=&quot;https://docs.nixbuild.net/nixbuild-shell/#check-your-account-usage&quot;&gt;usage&lt;/a&gt; command.&lt;/p&gt;
&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;
&lt;p&gt;After one year of real world usage, we are very happy with the progress of nixbuild.net. It has been well received in the Nix community, proved both reliable and scalable, and it has delivered on our initial vision of a simple service that can integrate into any setup using Nix.&lt;/p&gt;
&lt;p&gt;We feel that we can go anywhere from here, but we also realize that we must be guided by our users’ needs. We have compiled a small and informal roadmap below. The items on this list are things that we, based on the feedback we’ve received throughout the year, think are natural next steps for nixbuild.net.&lt;/p&gt;
&lt;p&gt;The roadmap has no dates and no prioritization, and should be seen as merely a hint about which direction the development is heading. Any question or comment concerning this list (or what’s missing from the list) is very welcome to &lt;a href=&quot;mailto:support@nixbuild.net&quot;&gt;support@nixbuild.net&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;support-aarch64-linux-builds&quot;&gt;Support aarch64-linux Builds&lt;/h3&gt;
&lt;p&gt;Work is already underway to add support for &lt;code&gt;aarch64-linux&lt;/code&gt; builds to nixbuild.net, and so far it is looking good. With the current surge in performant ARM hardware (Apple M1, Ampere Altra etc), we think having &lt;code&gt;aarch64&lt;/code&gt; support in nixbuild.net is an obvious feature. It is also something that has been requested by our users.&lt;/p&gt;
&lt;p&gt;We don’t know yet how the pricing of &lt;code&gt;aarch64&lt;/code&gt; builds will look, or what scalability promises we can make. If you are interested in evaluating &lt;code&gt;aarch64&lt;/code&gt; builds on nixbuild.net in an early access setting, just send us an email to &lt;a href=&quot;mailto:support@nixbuild.net&quot;&gt;support@nixbuild.net&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;provide-an-api-over-ssh-and-http&quot;&gt;Provide an API over SSH and HTTP&lt;/h3&gt;
&lt;p&gt;Currently the &lt;a href=&quot;https://docs.nixbuild.net/nixbuild-shell/&quot;&gt;nixbuild.net shell&lt;/a&gt; is the administrative tool we offer end users. We will keep developing the shell and make it more intuitive for interactive use. But will also add an alternative, more scriptable variant of the shell.&lt;/p&gt;
&lt;p&gt;This alternative version will provide roughly the same functionality as the original shell, only more adapted to scripting instead of interactive use. The reason for providing such an SSH-based API is to make it easy to integrate nixbuild.net more tightly into CI and similar scenarios.&lt;/p&gt;
&lt;p&gt;There is in fact already a tiny version of this API deployed. You can run the following command to try it out:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh eu.nixbuild.net api show public-signing-key
{&quot;keyName&quot;:&quot;nixbuild.net/bob-1&quot;,&quot;publicKey&quot;:&quot;PmUhzAc4Ug6sf1uG8aobbqMdalxW41SHWH7FE0ie1BY=&quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above API command is in use by the &lt;a href=&quot;https://github.com/nixbuild/nixbuild-action&quot;&gt;nixbuild-action&lt;/a&gt; for GitHub. So far, this is the only API command implemented, and it should be seen as a very first proof of concept. Nothing has been decided on how the API should look and work in the future.&lt;/p&gt;
&lt;p&gt;The API will also be offered over HTTP in addition to SSH.&lt;/p&gt;
&lt;h3 id=&quot;upload-builds-to-binary-caches&quot;&gt;Upload builds to binary caches&lt;/h3&gt;
&lt;p&gt;Adding custom binary caches that nixbuild.net can fetch dependencies from is supported today, although such requests are still handled manually through support.&lt;/p&gt;
&lt;p&gt;We also want to support uploading to custom binary caches. That way users could gain performance by not having to first download build results from nixbuild.net and then upload them somewhere else. This could be very useful for CI setups that can spend a considerable amount of their time just uploading closures.&lt;/p&gt;
&lt;h3 id=&quot;provide-an-http-based-binary-cache&quot;&gt;Provide an HTTP-based binary cache&lt;/h3&gt;
&lt;p&gt;Using nixbuild.net as a binary cache is handy since you don’t have to wait for any uploads after a build has finished. Instead, the closures will be immediately available in the binary cache, backed by nixbuild.net.&lt;/p&gt;
&lt;p&gt;It is actually possible to use nixbuild.net as a binary cache today, by configuring an SSH-based cache (&lt;code&gt;ssh://eu.nixbuild.net&lt;/code&gt;). This works out of the box right now. You can even use &lt;code&gt;nix-copy-closure&lt;/code&gt; to upload paths to nixbuild.net. We just don’t yet give any guarantees on how long store paths are kept.&lt;/p&gt;
&lt;p&gt;However, there are benfits to providing an HTTP-based cache. It would most probably have better performance (serving nar files over HTTP instead of using the &lt;code&gt;nix-store&lt;/code&gt; protocol over SSH), but more importantly it would let us use a CDN for serving cache contents. This could help mitigate the fact that nixbuild.net is only deployed in Europe so far.&lt;/p&gt;
&lt;h3 id=&quot;support-builds-that-use-kvm&quot;&gt;Support builds that use KVM&lt;/h3&gt;
&lt;p&gt;The primary motivation for this is to be able to run NixOS tests (with good performance) on nixbuild.net.&lt;/p&gt;
&lt;h2 id=&quot;thank-you&quot;&gt;Thank You!&lt;/h2&gt;
&lt;p&gt;Finally we’d like to thank all our users. We look forward to an exciting new year with lots of Nix builds!&lt;/p&gt;</description>
	<pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate>
	<author>support@nixbuild.net (nixbuild.net)</author>
</item>
<item>
	<title>Cachix: Postmortem of outage on 20th December</title>
	<guid isPermaLink="true">https://blog.cachix.org/posts/2020-12-23-post-mortem-recent-downtime/</guid>
	<link>https://blog.cachix.org/posts/2020-12-23-post-mortem-recent-downtime/</link>
	<description>On 20 December, Cachix experienced a six-hour downtime, the second significant outage since the service started operating on 1 June 2018.
Here are the details of what exactly happened and what has been done to prevent similar events from happening.
Timeline (UTC)  02:55:07 - Backend starts to emit errors for all HTTP requests 02:56:00 - Pagerduty tries to notify me of outage via email, phone and mobile app 09:01:00 - I wake up and see the notifications 09:02:02 - Backend is restarted and recovers  Root cause analysis All ~24k HTTP requests that reached the backend during the outage failed with the following exception:</description>
	<pubDate>Thu, 24 Dec 2020 11:30:00 +0000</pubDate>
	<author>support@cachix.org (Domen Kožar)</author>
</item>
<item>
	<title>Ollie Charles: Monad Transformers and Effects with Backpack</title>
	<guid isPermaLink="true">http://ocharles.org.uk/blog/posts/2020-12-23-monad-transformers-and-effects-with-backpack.html</guid>
	<link>http://ocharles.org.uk/blog/posts/2020-12-23-monad-transformers-and-effects-with-backpack.html</link>
	<description>&lt;p&gt;A good few years ago &lt;a href=&quot;http://ezyang.com/&quot;&gt;Edward Yang&lt;/a&gt; gifted us an implementation of Backpack - a way for us to essentially abstract modules over other modules, allowing us to write code independently of implementation. A big benefit of doing this is that it opens up new avenues for program optimization. When we provide concrete instantiations of signatures, GHC compiles it as if that were the original code we wrote, and we can benefit from a lot of specialization. So aside from organizational concerns, Backpack gives us the ability to write some really fast code. This benefit isn’t just theoretical - Edward Kmett gave us &lt;a href=&quot;https://hackage.haskell.org/package/unpacked-containers&quot;&gt;unpacked-containers&lt;/a&gt;, removing a level of indirection from all keys, and Oleg Grenrus showed as how we can use Backpack to &lt;a href=&quot;https://www.well-typed.com/blog/2019/11/unrolling-data-with-backpack/&quot;&gt;“unroll” fixed sized vectors&lt;/a&gt;. In this post, I want to show how we can use Backpack to give us the performance benefits of explicit transformers, but without having library code commit to any specific stack. In short, we get the ability to have multiple interpretations of our program, but without paying the performance cost of abstraction.&lt;/p&gt;
&lt;h1 id=&quot;the-problem&quot;&gt;The Problem&lt;/h1&gt;
&lt;p&gt;Before we start looking at any code, let’s look at some requirements, and understand the problems that come with some potential solutions. The main requirement is that we are able to write code that requires some effects (in essence, writing our code to an effect &lt;em&gt;interface&lt;/em&gt;), and then run this code with different interpretations. For example, in production I might want to run as fast as possible, in local development I might want further diagnostics, and in testing I might want a pure or in memory solution. This change in representation shouldn’t require me to change the underlying library code.&lt;/p&gt;
&lt;p&gt;Seasoned Haskellers might be familiar with the use of effect systems to solve these kinds of problems. Perhaps the most familiar is the &lt;code&gt;mtl&lt;/code&gt; approach - perhaps unfortunately named as the technique itself doesn’t have much to do with the library. In the &lt;code&gt;mtl&lt;/code&gt; approach, we write our interfaces as type classes abstracting over some &lt;code&gt;Monad m&lt;/code&gt;, and then provide instances of these type classes - either by stacking transformers (“plucking constraints”, in the &lt;a href=&quot;https://www.parsonsmatt.org/2020/01/03/plucking_constraints.html&quot;&gt;words of Matt Parson&lt;/a&gt;), or by a “mega monad” that implements many of these instances at once (e.g., like Tweag’s &lt;a href=&quot;https://github.com/tweag/capability&quot;&gt;&lt;code&gt;capability&lt;/code&gt;&lt;/a&gt;) approach.&lt;/p&gt;
&lt;p&gt;Despite a few annoyances (e.g., the “n+k” problem, the lack of implementations being first-class, and a few other things), this approach can work well. It also has the &lt;em&gt;potential&lt;/em&gt; to generate a great code, but &lt;em&gt;in practice&lt;/em&gt; it’s rarely possible to achieve maximal performance. In her excellent talk &lt;a href=&quot;https://www.youtube.com/watch?v=0jI-AlWEwYI&quot;&gt;“Effects for Less”&lt;/a&gt;, &lt;a href=&quot;https://lexi-lambda.github.io/&quot;&gt;Alexis King&lt;/a&gt; hits the nail on the head - despite being able to provide good code for the implementations of particular &lt;em&gt;parts&lt;/em&gt; of an effect, the majority of effectful code is really just threading around inside the &lt;code&gt;Monad&lt;/code&gt; constraint. When we’re being polymorphic over any &lt;code&gt;Monad m&lt;/code&gt;, GHC is at a loss to do any further optimization - and how could it? We know nothing more than “there will be some &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; function when you get here, promise!” Let’s look at this in a bit more detail.&lt;/p&gt;
&lt;p&gt;Say we have the following:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb1-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;foo ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt; m &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; m &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb1-2&quot;&gt;&lt;/a&gt;foo &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; go &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;_000_000_000&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb1-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb1-4&quot;&gt;&lt;/a&gt;    go acc &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; acc&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb1-5&quot;&gt;&lt;/a&gt;    go acc i &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; acc &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; go (acc &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) (i &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is obviously “I needed an example for my blog” levels of contrived, but at least small. How does it execute? What are the runtime consequences of this code? To answer, we’ll go all the way down to the STG level with &lt;code&gt;-ddump-stg&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;wfoo &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-2&quot;&gt;&lt;/a&gt;    \r [ww_s2FA ww1_s2FB]&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-3&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-4&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;dt&quot;&gt;Rec&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-5&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;sgo_s2FC &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-6&quot;&gt;&lt;/a&gt;              \r [sc_s2FD sc1_s2FE]&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-7&quot;&gt;&lt;/a&gt;                  &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; eqInteger&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt; sc_s2FD lvl1_r2Fp &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-8&quot;&gt;&lt;/a&gt;                    __DEFAULT &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-9&quot;&gt;&lt;/a&gt;                        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-10&quot;&gt;&lt;/a&gt;                          sat_s2FK &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-11&quot;&gt;&lt;/a&gt;                              \u []&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-12&quot;&gt;&lt;/a&gt;                                  &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+#&lt;/span&gt; [sc1_s2FE &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;] &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt; sat_s2FJ {&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-13&quot;&gt;&lt;/a&gt;                                    __DEFAULT &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-14&quot;&gt;&lt;/a&gt;                                        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; minusInteger sc_s2FD lvl_r2Fo &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt; sat_s2FI {&lt;/span&gt;
&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-15&quot;&gt;&lt;/a&gt;                                          __DEFAULT &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;sgo_s2FC sat_s2FI sat_s2FJ;&lt;/span&gt;
&lt;span id=&quot;cb2-16&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-16&quot;&gt;&lt;/a&gt;                                        };&lt;/span&gt;
&lt;span id=&quot;cb2-17&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-17&quot;&gt;&lt;/a&gt;                                  }; } &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-18&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-18&quot;&gt;&lt;/a&gt;                        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&quot;cb2-19&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-19&quot;&gt;&lt;/a&gt;                          sat_s2FH &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-20&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-20&quot;&gt;&lt;/a&gt;                              \u []&lt;/span&gt;
&lt;span id=&quot;cb2-21&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-21&quot;&gt;&lt;/a&gt;                                  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; { sat_s2FG &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CCCS&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#!&lt;/span&gt; [sc1_s2FE]; } &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  ww1_s2FB sat_s2FG;&lt;/span&gt;
&lt;span id=&quot;cb2-22&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-22&quot;&gt;&lt;/a&gt;                        } &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  ww_s2FA sat_s2FH sat_s2FK;&lt;/span&gt;
&lt;span id=&quot;cb2-23&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-23&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-24&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-24&quot;&gt;&lt;/a&gt;                        &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; { sat_s2FL &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CCCS&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#!&lt;/span&gt; [sc1_s2FE]; } &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  ww1_s2FB sat_s2FL;&lt;/span&gt;
&lt;span id=&quot;cb2-25&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-25&quot;&gt;&lt;/a&gt;                  };&lt;/span&gt;
&lt;span id=&quot;cb2-26&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-26&quot;&gt;&lt;/a&gt;          end &lt;span class=&quot;dt&quot;&gt;Rec&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb2-27&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-27&quot;&gt;&lt;/a&gt;        } &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;sgo_s2FC lvl2_r2Fq &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&quot;cb2-28&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-28&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-29&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-29&quot;&gt;&lt;/a&gt;foo &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-30&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-30&quot;&gt;&lt;/a&gt;    \r [w_s2FM]&lt;/span&gt;
&lt;span id=&quot;cb2-31&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-31&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; w_s2FM &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&quot;cb2-32&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-32&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;dt&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt; _ _ ww3_s2FQ ww4_s2FR &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;wfoo ww3_s2FQ ww4_s2FR;&lt;/span&gt;
&lt;span id=&quot;cb2-33&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb2-33&quot;&gt;&lt;/a&gt;        };&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In STG, whenever we have a &lt;code&gt;let&lt;/code&gt; we have to do a heap allocation - and this code has quite a few! Of particular interest is the what’s going on inside the actual loop &lt;code&gt;$sgo_s2FC&lt;/code&gt;. This loop first compares &lt;code&gt;i&lt;/code&gt; to see if it’s &lt;code&gt;0&lt;/code&gt;. In the case that’s it’s not, we allocate two objects and call &lt;code&gt;ww_s2Fa&lt;/code&gt;. If you squint, you’ll notice that &lt;code&gt;ww_s2FA&lt;/code&gt; is the first argument to &lt;code&gt;$wfoo&lt;/code&gt;, and it ultimately comes from unpacking a &lt;code&gt;C:Monad&lt;/code&gt; dictionary. I’ll save you the labor of working out what this is - &lt;code&gt;ww_s2Fa&lt;/code&gt; is the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;. We can see that every iteration of our loop incurs two allocations for each argument to &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;. A heap allocation doesn’t come for free - not only do we have to do the allocation, the entry into the heap incurs a pointer indirection (as heap objects have an info table that points to their entry), and also by merely being on the heap we increase our GC time as we have a bigger heap to traverse. While my STG knowledge isn’t great, my understanding of this code is that every time we want to call &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, we need to supply it with its arguments. This means we have to allocate two closures for this function call - which is basically whenever we pressed “return” on our keyboard when we wrote the code. This seems crazy - can you imagine if you were told in C that merely using &lt;code&gt;;&lt;/code&gt; would cost time and memory?&lt;/p&gt;
&lt;p&gt;If we compile this code in a separate module, mark it as &lt;code&gt;{-# NOINLINE #-}&lt;/code&gt;, and then call it from &lt;code&gt;main&lt;/code&gt; - how’s the performance? Let’s check!&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb3-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Main&lt;/span&gt; (main) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb3-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb3-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Foo&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb3-4&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb3-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;main ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb3-6&quot;&gt;&lt;/a&gt;main &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;$ ./Main +RTS -s
1000000000
 176,000,051,368 bytes allocated in the heap
       8,159,080 bytes copied during GC
          44,408 bytes maximum residency (1 sample(s))
          33,416 bytes maximum slop
               0 MB total memory in use (0 MB lost due to fragmentation)

                                     Tot time (elapsed)  Avg pause  Max pause
  Gen  0     169836 colls,     0 par    0.358s   0.338s     0.0000s    0.0001s
  Gen  1         1 colls,     0 par    0.000s   0.000s     0.0001s    0.0001s

  INIT    time    0.000s  (  0.000s elapsed)
  MUT     time   54.589s  ( 54.627s elapsed)
  GC      time    0.358s  (  0.338s elapsed)
  EXIT    time    0.000s  (  0.000s elapsed)
  Total   time   54.947s  ( 54.965s elapsed)

  %GC     time       0.0%  (0.0% elapsed)

  Alloc rate    3,224,078,302 bytes per MUT second

  Productivity  99.3% of total user, 99.4% of total elapsed&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;OUCH&lt;/strong&gt;. My i7 laptop took almost a minute to iterate a loop 1 billion times.&lt;/p&gt;
&lt;p&gt;A little disclaimer: I’m intentionally painting a severe picture here - in practice this cost is irrelevant to all but the most performance sensitive programs. Also, notice where the &lt;code&gt;let&lt;/code&gt; bindings are in the STG above - they are nested within the loop. This means that we’re essentially allocating “as we go” - these allocations are incredibly cheap, and the growth to GC is equal trivial, resulting in more like constant GC pressure, rather than impending doom. For code that is likely to do any IO, this cost is likely negligible compared to the rest of the work. Nonetheless, it is there, and when it’s there, it’s nice to know if there are alternatives.&lt;/p&gt;
&lt;p&gt;So, is the TL;DR that Haskell is completely incapable of writing effectful code? No, of course not. There is another way to compile this program, but we need a bit more information. If we happen to know what &lt;code&gt;m&lt;/code&gt; is and we have access to the &lt;code&gt;Monad&lt;/code&gt; dictionary for &lt;code&gt;m&lt;/code&gt;, then we might be able to inline &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;. When we do this, GHC can be a lot smarter. The end result is code that now doesn’t allocate for every single &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;, and instead just gets on with doing work. One trivial way to witness this is to define everything in a single module (Alexis rightly points out this is a trap for benchmarking that many fall into, but for our uses it’s the behavior we actually want).&lt;/p&gt;
&lt;p&gt;This time, let’s write everything in one module:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb5-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Main&lt;/span&gt; ( main ) &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb5-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the STG:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-1&quot;&gt;&lt;/a&gt;lvl_r4AM &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CCS_DONT_CARE&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#!&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-3&quot;&gt;&lt;/a&gt;lvl1_r4AN &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CCS_DONT_CARE&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#!&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-4&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Rec&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-6&quot;&gt;&lt;/a&gt;main_&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;sgo &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-7&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-7&quot;&gt;&lt;/a&gt;    \r [void_0E sc1_s4AY sc2_s4AZ]&lt;/span&gt;
&lt;span id=&quot;cb6-8&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-8&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; eqInteger&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt; sc1_s4AY lvl_r4AM &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&quot;cb6-9&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-9&quot;&gt;&lt;/a&gt;          __DEFAULT &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-10&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-10&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+#&lt;/span&gt; [sc2_s4AZ &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;] &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt; sat_s4B2 {&lt;/span&gt;
&lt;span id=&quot;cb6-11&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-11&quot;&gt;&lt;/a&gt;                __DEFAULT &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-12&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-12&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; minusInteger sc1_s4AY lvl1_r4AN &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt; sat_s4B1 {&lt;/span&gt;
&lt;span id=&quot;cb6-13&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-13&quot;&gt;&lt;/a&gt;                      __DEFAULT &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; main_&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;sgo void&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt; sat_s4B1 sat_s4B2;&lt;/span&gt;
&lt;span id=&quot;cb6-14&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-14&quot;&gt;&lt;/a&gt;                    };&lt;/span&gt;
&lt;span id=&quot;cb6-15&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-15&quot;&gt;&lt;/a&gt;              };&lt;/span&gt;
&lt;span id=&quot;cb6-16&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-16&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; { sat_s4B3 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CCCS&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#!&lt;/span&gt; [sc2_s4AZ]; } &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;dt&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt; [sat_s4B3];&lt;/span&gt;
&lt;span id=&quot;cb6-17&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-17&quot;&gt;&lt;/a&gt;        };&lt;/span&gt;
&lt;span id=&quot;cb6-18&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-18&quot;&gt;&lt;/a&gt;end &lt;span class=&quot;dt&quot;&gt;Rec&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb6-19&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-19&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-20&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-20&quot;&gt;&lt;/a&gt;main2 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CCS_DONT_CARE&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#!&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;1000000000&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&quot;cb6-21&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-21&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-22&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-22&quot;&gt;&lt;/a&gt;main1 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-23&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-23&quot;&gt;&lt;/a&gt;    \r [void_0E]&lt;/span&gt;
&lt;span id=&quot;cb6-24&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-24&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; main_&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;sgo void&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt; main2 &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&quot;cb6-25&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-25&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;dt&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt; ipv1_s4B7 &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-26&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-26&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; { sat_s4B8 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \s [] &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;fShowInt_&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;cshow ipv1_s4B7;&lt;/span&gt;
&lt;span id=&quot;cb6-27&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-27&quot;&gt;&lt;/a&gt;              } &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  hPutStr' stdout sat_s4B8 &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; void&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&quot;cb6-28&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-28&quot;&gt;&lt;/a&gt;        };&lt;/span&gt;
&lt;span id=&quot;cb6-29&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-29&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-30&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-30&quot;&gt;&lt;/a&gt;main &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \r [void_0E] main1 void&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&quot;cb6-31&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-31&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-32&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-32&quot;&gt;&lt;/a&gt;main3 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \r [void_0E] runMainIO1 main1 void&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;;&lt;/span&gt;
&lt;span id=&quot;cb6-33&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-33&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-34&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb6-34&quot;&gt;&lt;/a&gt;main &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \r [void_0E] main3 void&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The same program compiled down to much tighter loop that is almost entirely free of allocations. In fact, the only allocation that happens is when the loop terminates, and it’s just boxing the unboxed integer that’s been accumulating in the loop.&lt;/p&gt;
&lt;p&gt;As we might hope, the performance of this is much better:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./Main +RTS -s
1000000000
  16,000,051,312 bytes allocated in the heap
         128,976 bytes copied during GC
          44,408 bytes maximum residency (1 sample(s))
          33,416 bytes maximum slop
               0 MB total memory in use (0 MB lost due to fragmentation)

                                     Tot time (elapsed)  Avg pause  Max pause
  Gen  0     15258 colls,     0 par    0.031s   0.029s     0.0000s    0.0000s
  Gen  1         1 colls,     0 par    0.000s   0.000s     0.0001s    0.0001s

  INIT    time    0.000s  (  0.000s elapsed)
  MUT     time    9.402s  (  9.405s elapsed)
  GC      time    0.031s  (  0.029s elapsed)
  EXIT    time    0.000s  (  0.000s elapsed)
  Total   time    9.434s  (  9.434s elapsed)

  %GC     time       0.0%  (0.0% elapsed)

  Alloc rate    1,701,712,595 bytes per MUT second

  Productivity  99.7% of total user, 99.7% of total elapsed&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our time in the garbage collector dropped by a factor of 10, from 0.3s to 0.03. Our total allocation dropped from 176GB (yes, you read that right) to 16GB (I’m still not entirely sure what this means, maybe someone can enlighten me). Most importantly our total runtime dropped from 54s to just under 10s. All this from just knowing what &lt;code&gt;m&lt;/code&gt; is at compile time.&lt;/p&gt;
&lt;p&gt;So GHC is capable of producing excellent code for monads - what are the circumstances under which this happens? We need, at least:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;The source code of the thing we’re compiling must be available. This means it’s either defined in the same module, or is available with an &lt;code&gt;INLINABLE&lt;/code&gt; pragma (or GHC has chosen to add this itself).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The definitions of &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; and friends must also be available in the same way.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These constraints start to feel a lot like needing whole program compilation, and in practice are unreasonable constraints to reach. To understand why, consider that most real world programs have a small &lt;code&gt;Main&lt;/code&gt; module that opens some connections or opens some file handles, and then calls some library code defined in another module. If this code in the other module was already compiled, it will (probably) have been compiled as a function that takes a &lt;code&gt;Monad&lt;/code&gt; dictionary, and just calls the &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; function repeatedly in the same manner as our original STG code. To get the allocation-free version, this library code needs to be available to the &lt;code&gt;Main&lt;/code&gt; module itself - as that’s the module that choosing what type to instantiate ‘m’ with - which means the library code has to have marked that code as being inlinable. While we could add &lt;code&gt;INLINE&lt;/code&gt; everywhere, this leads to an explosion in the amount of code produced, and can sky rocket compilation times.&lt;/p&gt;
&lt;p&gt;Alexis’ &lt;a href=&quot;https://github.com/hasura/eff&quot;&gt;&lt;code&gt;eff&lt;/code&gt;&lt;/a&gt; library works around this by &lt;em&gt;not&lt;/em&gt; being polymorphic in &lt;code&gt;m&lt;/code&gt;. Instead, it chooses a concrete monad with all sorts of fancy continuation features. Likewise, if we commit to a particular monad (a transformer stack, or maybe using &lt;code&gt;RIO&lt;/code&gt;), we again avoid this cost. Essentially, if the monad is known a priori at time of module compilation, GHC can go to town. However, the latter also commits to semantics - by choosing a transformer stack, we’re choosing a semantics for our monadic effects.&lt;/p&gt;
&lt;p&gt;With the scene set, I now want to present you with another approach to solving this problem using Backpack.&lt;/p&gt;
&lt;h1 id=&quot;a-backpack-primer&quot;&gt;A Backpack Primer&lt;/h1&gt;
&lt;p&gt;Vanilla GHC has a very simple module system - modules are essentially a method for name-spacing and separate compilation, they don’t do much more. The Backpack project extends this module system with a new concept - signatures. A signature is like the “type” of a module - a signature might mention the presence of some types, functions and type class instances, but it says nothing about what the definitions of these entities are. We’re going to (ab)use this system to build up transformer stacks at configuration time, and allow our library to be abstracted over different monads. By instantiating our library code with different monads, we get different interpretations of the same program.&lt;/p&gt;
&lt;p&gt;I won’t sugar coat - what follows is going to pretty miserable. Extremely fun, but miserable to write in practice. I’ll let you decide if you want to inflict this misery on your coworkers in practice - I’m just here to show you it can be done!&lt;/p&gt;
&lt;h2 id=&quot;a-signature-for-monads&quot;&gt;A Signature for Monads&lt;/h2&gt;
&lt;p&gt;The first thing we’ll need is a signature for data types that are monads. This is essentially the “hole” we’ll rely on with our library code - it will give us the ability to say “there exists a monad”, without committing to any particular choice.&lt;/p&gt;
&lt;p&gt;In our Cabal file, we have:&lt;/p&gt;
&lt;pre class=&quot;cabal&quot;&gt;&lt;code&gt;library monad-sig
  hs-source-dirs:   src-monad-sig
  signatures:       Control.Monad.Signature
  default-language: Haskell2010
  build-depends:    base&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The important line here is &lt;code&gt;signatures: Control.Monad.Signature&lt;/code&gt; which shows that this library is incomplete and exports a signature. The definition of &lt;code&gt;Control/Monad/Signature.hsig&lt;/code&gt; is:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb9-1&quot;&gt;&lt;/a&gt;signature &lt;span class=&quot;dt&quot;&gt;Control.Monad.Signature&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb9-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb9-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;M&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb9-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;M&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-5&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb9-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;M&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-6&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb9-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;M&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This simply states that any module with this signature has some type &lt;code&gt;M&lt;/code&gt; with instances of &lt;code&gt;Functor&lt;/code&gt;, &lt;code&gt;Applicative&lt;/code&gt; and &lt;code&gt;Monad&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, we’ll put that signature to use in our library code.&lt;/p&gt;
&lt;h2 id=&quot;libary-code&quot;&gt;Libary Code&lt;/h2&gt;
&lt;p&gt;For our library code, we’ll start with a new library in our Cabal file:&lt;/p&gt;
&lt;pre class=&quot;cabal&quot;&gt;&lt;code&gt;library business-logic
  hs-source-dirs:   lib
  signatures:       BusinessLogic.Monad
  exposed-modules:  BusinessLogic
  build-depends:
    , base
    , fused-effects
    , monad-sig

  default-language: Haskell2010
  mixins:
    monad-sig requires (Control.Monad.Signature as BusinessLogic.Monad)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our business-logic library itself exports a signature, which is really just a re-export of the &lt;code&gt;Control.Monad.Signature&lt;/code&gt;, but we rename it something more meaningful. It’s this module that will provide the monad that has all of the effects we need. Along with this signature, we also export the &lt;code&gt;BusinessLogic&lt;/code&gt; module:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb11-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# language FlexibleContexts #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb11-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;BusinessLogic&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-3&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb11-3&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-4&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb11-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;BusinessLogic.Monad&lt;/span&gt; ( &lt;span class=&quot;dt&quot;&gt;M&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&quot;cb11-5&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb11-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Algebra&lt;/span&gt; ( &lt;span class=&quot;dt&quot;&gt;Has&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&quot;cb11-6&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb11-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Effect.Empty&lt;/span&gt; ( &lt;span class=&quot;dt&quot;&gt;Empty&lt;/span&gt;, guard )&lt;/span&gt;
&lt;span id=&quot;cb11-7&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb11-7&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-8&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb11-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;businessCode ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Has&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Empty&lt;/span&gt; sig &lt;span class=&quot;dt&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-9&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb11-9&quot;&gt;&lt;/a&gt;businessCode b &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb11-10&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb11-10&quot;&gt;&lt;/a&gt;  guard b&lt;/span&gt;
&lt;span id=&quot;cb11-11&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb11-11&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this module I’m using &lt;code&gt;fused-effects&lt;/code&gt; as a framework to say which effects my monad should have (though this is not particularly important, I just like it!). Usually &lt;code&gt;Has&lt;/code&gt; would be applied to a type variable &lt;code&gt;m&lt;/code&gt;, but here we’re applying it to the type &lt;code&gt;M&lt;/code&gt;. This type comes from &lt;code&gt;BusinessLogic.Monad&lt;/code&gt;, which is a signature (you can confirm this by checking against the Cabal file). Other than that, this is all pretty standard!&lt;/p&gt;
&lt;h2 id=&quot;backpack-ing-monad-transformers&quot;&gt;Backpack-ing Monad Transformers&lt;/h2&gt;
&lt;p&gt;Now we get into the really fun stuff - providing implementations of effects. I mentioned earlier that one possible way to do this is with a stack of monad transformers. Generally speaking, one would write a single &lt;code&gt;newtype T m a&lt;/code&gt; for each effect type class, and have that transformer dispatch any effects in that class, and to &lt;code&gt;lift&lt;/code&gt; any effects from other classes - deferring their implementation to &lt;code&gt;m&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We’re going to take the same approach here, but we’ll absorb the idea of a transformer directly into the module itself. Let’s look at an implementation of the &lt;code&gt;Empty&lt;/code&gt; effect. The &lt;code&gt;Empty&lt;/code&gt; effect gives us a special &lt;code&gt;empty :: m a&lt;/code&gt; function, which serves the purpose of stopping execution immediately. As a monad transformer, one implementation is &lt;code&gt;MaybeT&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb12-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;MaybeT&lt;/span&gt; m a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;MaybeT&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; runMaybeT ::&lt;/span&gt; m (&lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; a) }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But we can also write this using Backpack. First, our Cabal library:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb13-1&quot;&gt;&lt;/a&gt;library fused&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;effects&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;empty&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;maybe&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb13-2&quot;&gt;&lt;/a&gt;  hs&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;source&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;dirs&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;   src&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;fused&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;effects&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;backpack&lt;/span&gt;
&lt;span id=&quot;cb13-3&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb13-3&quot;&gt;&lt;/a&gt;  default&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;language&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Haskell2010&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-4&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb13-4&quot;&gt;&lt;/a&gt;  build&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;depends&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-5&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb13-5&quot;&gt;&lt;/a&gt;    , base&lt;/span&gt;
&lt;span id=&quot;cb13-6&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb13-6&quot;&gt;&lt;/a&gt;    , fused&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;effects&lt;/span&gt;
&lt;span id=&quot;cb13-7&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb13-7&quot;&gt;&lt;/a&gt;    , monad&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;sig&lt;/span&gt;
&lt;span id=&quot;cb13-8&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb13-8&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-9&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb13-9&quot;&gt;&lt;/a&gt;  exposed&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;modules&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Carrier.Backpack.Empty.Maybe&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-10&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb13-10&quot;&gt;&lt;/a&gt;  mixins&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb13-11&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb13-11&quot;&gt;&lt;/a&gt;    monad&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;sig requires (&lt;span class=&quot;dt&quot;&gt;Control.Monad.Signature&lt;/span&gt; as &lt;span class=&quot;dt&quot;&gt;Control.Carrier.Backpack.Empty.Maybe.Base&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our library exports the module &lt;code&gt;Control.Carrier.Backpack.Empty.Maybe&lt;/code&gt;, but also has a hole - the type of base monad this transformer stacks on top of. As a monad transformer, this would be the &lt;code&gt;m&lt;/code&gt; parameter, but when we use Backpack, we move that out into a separate module.&lt;/p&gt;
&lt;p&gt;The implementation of &lt;code&gt;Control.Carrier.Backpack.Empty.Maybe&lt;/code&gt; is short, and almost identical to the body of &lt;code&gt;Control.Monad.Trans.Maybe&lt;/code&gt; - we just change any occurrences of &lt;code&gt;m&lt;/code&gt; to instead refer to &lt;code&gt;M&lt;/code&gt; from our &lt;code&gt;.Base&lt;/code&gt; module:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# language BlockArguments, FlexibleContexts, FlexibleInstances, LambdaCase,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;      MultiParamTypeClasses, TypeOperators, UndecidableInstances #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-3&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-3&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-4&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Carrier.Backpack.Empty.Maybe&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-5&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-5&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-6&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Algebra&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-7&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Effect.Empty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-8&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Carrier.Backpack.Empty.Maybe.Base&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Base&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-9&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-9&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-10&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-11&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-11&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-12&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- We could also write: newtype EmptyT a = EmptyT { runEmpty :: MaybeT Base.M a }&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-13&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; runEmpty ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Base.M&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; a) }&lt;/span&gt;
&lt;span id=&quot;cb14-14&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-14&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-15&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-15&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-16&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-16&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; f (&lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; m) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; f) m&lt;/span&gt;
&lt;span id=&quot;cb14-17&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-17&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-18&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-18&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Applicative&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-19&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-19&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-20&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-20&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; f &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; x &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-21&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-21&quot;&gt;&lt;/a&gt;    f &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-22&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-22&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-23&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-23&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; f' &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-24&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-24&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-25&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-25&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x' &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; (f' x'))&lt;/span&gt;
&lt;span id=&quot;cb14-26&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-26&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-27&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-27&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-28&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-28&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-29&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-29&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; f &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-30&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-30&quot;&gt;&lt;/a&gt;    x &lt;span class=&quot;op&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb14-31&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-31&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x' &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; runEmpty (f x')&lt;/span&gt;
&lt;span id=&quot;cb14-32&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb14-32&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we make sure that &lt;code&gt;Empty&lt;/code&gt; can handle the &lt;code&gt;Empty&lt;/code&gt; effect:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb15-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Algebra&lt;/span&gt; sig &lt;span class=&quot;dt&quot;&gt;Base.M&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Algebra&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Empty&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:+:&lt;/span&gt; sig) &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb15-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb15-2&quot;&gt;&lt;/a&gt;  alg handle sig context &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; sig &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb15-3&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb15-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Empty&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb15-4&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb15-4&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;R&lt;/span&gt; other &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;EmptyT&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; thread (&lt;span class=&quot;fu&quot;&gt;maybe&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;) runEmpty &lt;span class=&quot;op&quot;&gt;~&amp;lt;~&lt;/span&gt; handle) other (&lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; context)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;base-monads&quot;&gt;Base Monads&lt;/h2&gt;
&lt;p&gt;Now that we have a way to run the &lt;code&gt;Empty&lt;/code&gt; effect, we need a base case to our transformer stack. As our transformer is now built out of modules that conform to the &lt;code&gt;Control.Monad.Signature&lt;/code&gt; signature, we need some modules for each monad that we could use as a base. For this POC, I’ve just added the IO monad:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library fused-effects-lift-io
  hs-source-dirs:   src-fused-effects-backpack
  default-language: Haskell2010
  build-depends:    base
  exposed-modules:  Control.Carrier.Backpack.Lift.IO&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb17-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Control.Carrier.Backpack.Lift.IO&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb17-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb17-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting It All Together&lt;/h2&gt;
&lt;p&gt;Finally we can put all of this together into an actual executable. We’ll take our library code, instantiate the monad to be a combination of &lt;code&gt;EmptyT&lt;/code&gt; and &lt;code&gt;IO&lt;/code&gt;, and write a little &lt;code&gt;main&lt;/code&gt; function that unwraps this all into an &lt;code&gt;IO&lt;/code&gt; type. First, here’s the &lt;code&gt;Main&lt;/code&gt; module:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb18-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb18-2&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-3&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb18-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;BusinessLogic&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-4&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb18-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;BusinessLogic.Monad&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-5&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb18-5&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb18-6&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb18-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;main ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&quot;cb18-7&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb18-7&quot;&gt;&lt;/a&gt;main &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; BusinessLogic.Monad.runEmptyT (businessCode &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;BusinessLogic&lt;/code&gt; module we’ve seen before, but previously &lt;code&gt;BusinessLogic.Monad&lt;/code&gt; was a signature (remember, we renamed &lt;code&gt;Control.Monad.Signature&lt;/code&gt; to &lt;code&gt;BusinessLogic.Monad&lt;/code&gt;). In executables, you can’t have signatures - executables can’t be depended on, so it doesn’t make sense for them to have holes, they must be complete. The magic happens in our Cabal file:&lt;/p&gt;
&lt;pre class=&quot;cabal&quot;&gt;&lt;code&gt;executable test
  main-is:          Main.hs
  hs-source-dirs:   exe
  build-depends:
    , base
    , business-logic
    , fused-effects-empty-maybe
    , fused-effects-lift-io
    , transformers

  default-language: Haskell2010
  mixins:
    fused-effects-empty-maybe (Control.Carrier.Backpack.Empty.Maybe as BusinessLogic.Monad) requires (Control.Carrier.Backpack.Empty.Maybe.Base as BusinessLogic.Monad.Base),
    fused-effects-lift-io (Control.Carrier.Backpack.Lift.IO as BusinessLogic.Monad.Base)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wow, that’s a mouthful! The work is really happening in &lt;code&gt;mixins&lt;/code&gt;. Let’s take this step by step:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;First, we can see that we need to mixin the &lt;code&gt;fused-effects-empty-maybe&lt;/code&gt; library. The first &lt;code&gt;(X as Y)&lt;/code&gt; section specifies a list of modules from &lt;code&gt;fused-effects-empty-maybe&lt;/code&gt; and renames them for the &lt;code&gt;test&lt;/code&gt; executable that’s currently being compiled. Here, we’re renaming &lt;code&gt;Control.Carrier.Backpack.Empty.Maybe&lt;/code&gt; as &lt;code&gt;BusinessLogic.Monad&lt;/code&gt;. By doing this, we satisfy the hole in the &lt;code&gt;business-logic&lt;/code&gt; library, which was otherwise incomplete.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But &lt;code&gt;fused-effects-empty-maybe&lt;/code&gt; itself has a hole - the base monad for the transformer. The &lt;code&gt;requires&lt;/code&gt; part lets us rename this hole, but we’ll still need to plug it. For now, we rename &lt;code&gt;Control.Carrier.Backpack.Empty.Maybe.Base&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, we mixin the &lt;code&gt;fused-effects-lift-io&lt;/code&gt; library, and rename &lt;code&gt;Control.Carrier.Backpack.Lift.IO&lt;/code&gt; to be &lt;code&gt;BusinessLogic.Monad.Base&lt;/code&gt;. We’ve now satisfied the hole for &lt;code&gt;fused-effects-empty-maybe&lt;/code&gt;, and our executable has no more holes and can be compiled.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;were-done&quot;&gt;We’re Done!&lt;/h2&gt;
&lt;p&gt;That’s “all” there is to it. We can finally run our program:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb20-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; cabal run&lt;/span&gt;
&lt;span id=&quot;cb20-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb20-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you compare against &lt;code&gt;businessCode&lt;/code&gt; you’ll see that we got passed the &lt;code&gt;guard&lt;/code&gt; and returned &lt;code&gt;42&lt;/code&gt;. Because we instantiated &lt;code&gt;BusinessLogic.Monad&lt;/code&gt; with a &lt;code&gt;MaybeT&lt;/code&gt;-like transformer, this &lt;code&gt;42&lt;/code&gt; got wrapped up in &lt;code&gt;Just&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&quot;is-this-fast&quot;&gt;Is This Fast?&lt;/h1&gt;
&lt;p&gt;The best check here is to just look at the underlying code itself. If we add&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb21&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb21-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb21-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;{-# options -ddump-simpl -ddump-stg -dsuppress-all #-}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to &lt;code&gt;BusinessLogic&lt;/code&gt; and recompile, we’ll see the final code output to STDERR. The core is:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb22&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb22-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb22-1&quot;&gt;&lt;/a&gt;businessCode1&lt;/span&gt;
&lt;span id=&quot;cb22-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb22-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \ &lt;span class=&quot;op&quot;&gt;@&lt;/span&gt; sig_a2cM _ b_a13P eta_B1 &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb22-3&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb22-3&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; b_a13P &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&quot;cb22-4&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb22-4&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt; eta_B1, &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;);&lt;/span&gt;
&lt;span id=&quot;cb22-5&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb22-5&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt; eta_B1, lvl1_r2NP &lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb22-6&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb22-6&quot;&gt;&lt;/a&gt;      }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the STG:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb23&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb23-1&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb23-1&quot;&gt;&lt;/a&gt;businessCode1 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-2&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb23-2&quot;&gt;&lt;/a&gt;    \r [&lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;d(&lt;span class=&quot;op&quot;&gt;%&lt;/span&gt;,&lt;span class=&quot;op&quot;&gt;%&lt;/span&gt;)_s2PE b_s2PF eta_s2PG]&lt;/span&gt;
&lt;span id=&quot;cb23-3&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb23-3&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; b_s2PF &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&quot;cb23-4&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb23-4&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;dt&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;,&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;) [eta_s2PG &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;];&lt;/span&gt;
&lt;span id=&quot;cb23-5&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb23-5&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;,&lt;span class=&quot;op&quot;&gt;#&lt;/span&gt;) [eta_s2PG lvl1_r2NP];&lt;/span&gt;
&lt;span id=&quot;cb23-6&quot;&gt;&lt;a href=&quot;https://ocharles.org.uk/blog/posts.rss#cb23-6&quot;&gt;&lt;/a&gt;        };&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Voila!&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this post, I’ve hopefully shown how we &lt;em&gt;can&lt;/em&gt; use Backpack to write effectful code without paying the cost of abstraction. What I didn’t answer is the question of whether or you not you &lt;em&gt;should&lt;/em&gt;. There’s a lot more to effectful code than I’ve presented, and it’s unclear to me whether this approach can scale to the needs. For example, if we needed something like &lt;code&gt;mmorph&lt;/code&gt;’s &lt;code&gt;MFunctor&lt;/code&gt;, what do we do? Are we stuck? I don’t know! Beyond these technical challenges, it’s clear that Backpack here is also not remotely ergonomic, as is. We’ve had to write &lt;em&gt;five&lt;/em&gt; components just to get this done, and I pray for any one who comes to read this code and has to orientate themselves.&lt;/p&gt;
&lt;p&gt;Nonetheless, I think this an interesting point of the effect design space that hasn’t been explored, and maybe I’ve motivated some people to do some further exploration.&lt;/p&gt;
&lt;p&gt;The code for this blog post can be found at https://github.com/ocharles/fused-effects-backpack.&lt;/p&gt;
&lt;p&gt;Happy holidays, all!&lt;/p&gt;</description>
	<pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Tweag I/O: Trustix: Distributed trust and reproducibility tracking for binary caches</title>
	<guid isPermaLink="true">https://tweag.io/blog/2020-12-16-trustix-announcement/</guid>
	<link>https://tweag.io/blog/2020-12-16-trustix-announcement/</link>
	<description>&lt;p&gt;Downloading binaries from well-known providers is the easiest way to install new software.
After all, building software from source is a chore — it requires both time and technical expertise.
But how do we know that we aren’t installing something malicious from these providers?&lt;/p&gt;
&lt;p&gt;Typically, we trust these binaries because we trust the provider.
We believe that they were built from trusted sources, in a trusted computational environment, and with trusted build instructions.
But even if the provider does everything transparently and in good faith, the binaries could still be &lt;em&gt;anything&lt;/em&gt; if the provider’s system is compromised.
In other words, the build process requires &lt;em&gt;trust&lt;/em&gt; even if all build inputs (sources, dependencies, build scripts, etc…) are known.&lt;/p&gt;
&lt;p&gt;Overcoming this problem is hard — after all, how can we verify the output of arbitrary build inputs?
Excitingly, the last years have brought about ecosystems such as Nix, where all build inputs are known and where &lt;em&gt;significant amounts of builds are reproducible&lt;/em&gt;.
This means that the correspondence between inputs and outputs can be verified by building the same binary multiple times!
The &lt;a href=&quot;https://r13y.com/&quot;&gt;r13y&lt;/a&gt; project, for example, tracks non-reproducible builds by building them twice on the same machine, showing that this is indeed practical.&lt;/p&gt;
&lt;p&gt;But we can go further, and that’s the subject of this blog post, which introduces &lt;a href=&quot;https://github.com/tweag/trustix&quot;&gt;Trustix&lt;/a&gt;, a new tool we are working on.
Trustix compares build outputs for given build inputs across &lt;em&gt;independent&lt;/em&gt; providers and machines, effectively decentralizing trust.
This establishes what I like to call &lt;a href=&quot;https://build-transparency.org&quot;&gt;build transparency&lt;/a&gt; because it verifies what black box build machines are doing.
Behind the scenes Trustix builds a &lt;a href=&quot;https://en.wikipedia.org/wiki/Merkle_tree&quot;&gt;Merkle tree&lt;/a&gt;-based &lt;a href=&quot;https://en.wikipedia.org/wiki/Append-only&quot;&gt;append-only&lt;/a&gt; log that maps build inputs to build outputs, which I’ll come back to in a later post.
This log can be used to establish &lt;a href=&quot;https://en.wikipedia.org/wiki/Consensus_(computer_science)&quot;&gt;consensus&lt;/a&gt; whether certain build inputs always produce the same output — and can therefore be trusted.
Conversely, it can also be used to uncover non-reproducible builds, corrupted or not, on a large scale.&lt;/p&gt;
&lt;p&gt;The initial implementation of Trustix, and its description in this post are based on the Nix package manager.
Nix focuses on isolated builds, provides access to the hashes of all build inputs as well as a high quantity of bit-reproducible packages, making it the ideal initial testing ecosystem.
However, Trustix was designed to be system-independent, and is not strongly tied to Nix.&lt;/p&gt;
&lt;p&gt;The developmentent of &lt;a href=&quot;https://github.com/tweag/trustix&quot;&gt;Trustix&lt;/a&gt; is funded by &lt;a href=&quot;https://nlnet.nl/project/Trustix&quot;&gt;NLnet foundation&lt;/a&gt; and the European Commission’s &lt;a href=&quot;https://ngi.eu&quot;&gt;Next Generation Internet&lt;/a&gt; programme through the &lt;a href=&quot;https://nlnet.nl/PET&quot;&gt;NGI Zero PET&lt;/a&gt; (privacy and trust enhancing technologies) fund.
The tool is still in development, but I’m very excited to announce it already!&lt;/p&gt;
&lt;h2&gt;How Nix verifies binary cache results&lt;/h2&gt;
&lt;p&gt;Most Linux package managers use a very simple signature scheme to secure binary distribution to users.
Some use GPG keys, some use OpenSSL certificates, and others use some other kind of key, but the idea is essentially the same for all of them.
The general approach is that binaries are signed with a private key, and clients can use an associated public key to check that a binary was really signed by the trusted entity.&lt;/p&gt;
&lt;p&gt;Nix for example uses an ed25519-based key signature scheme and comes with a default hard-coded public key that corresponds to the default cache.
This key can be overridden or complemented by others, allowing the use of additional caches.
The list of signing keys can be found in &lt;code class=&quot;language-text&quot;&gt;/etc/nix/nix.conf&lt;/code&gt;.
The default base64-encoded ed25519 public key with a name as additional metadata looks like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, in Nix, software is addressed by the hash of all of its build inputs (sources, dependencies and build instructions).
This hash, or the output path is used to query a cache (like &lt;a href=&quot;https://cache.nixos.org&quot;&gt;https://cache.nixos.org&lt;/a&gt;) for a binary.&lt;/p&gt;
&lt;p&gt;Here is an example:
The hash of the &lt;code class=&quot;language-text&quot;&gt;hello&lt;/code&gt; derivation can be obtained from a shell with &lt;code class=&quot;language-text&quot;&gt;nix-instantiate&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ nix-instantiate '&amp;lt;nixpkgs&amp;gt;' --eval -A hello.outPath
&quot;/nix/store/w9yy7v61ipb5rx6i35zq1mvc2iqfmps1-hello-2.10&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, behind the scenes, we have evaluated and hashed all build inputs that the &lt;code class=&quot;language-text&quot;&gt;hello&lt;/code&gt; derivation needs (&lt;code class=&quot;language-text&quot;&gt;.outPath&lt;/code&gt; is just a helper).
This hash can then be used to query the default Nix binary cache:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ curl https://cache.nixos.org/w9yy7v61ipb5rx6i35zq1mvc2iqfmps1.narinfo
StorePath: /nix/store/w9yy7v61ipb5rx6i35zq1mvc2iqfmps1-hello-2.10
URL: nar/15zk4zszw9lgkdkkwy7w11m5vag11n5dhv2i6hj308qpxczvdddx.nar.xz
Compression: xz
FileHash: sha256:15zk4zszw9lgkdkkwy7w11m5vag11n5dhv2i6hj308qpxczvdddx
FileSize: 41232
NarHash: sha256:1mi14cqk363wv368ffiiy01knardmnlyphi6h9xv6dkjz44hk30i
NarSize: 205968
References: 9df65igwjmf2wbw0gbrrgair6piqjgmi-glibc-2.31 w9yy7v61ipb5rx6i35zq1mvc2iqfmps1-hello-2.10
Sig: cache.nixos.org-1:uP5KU8MCmyRnKGlN5oEv6xWJBI5EO/Pf5aFztZuLSz8BpCcZ1fdBnJkVXhBAlxkdm/CemsgQskhwvyd2yghTAg==&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Besides links to the archive that contains the compressed binaries, this response includes two relevant pieces of information which are used to verify binaries from the binary cache(s):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;NarHash&lt;/code&gt; is a hash over all Nix store directory contents&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;Sig&lt;/code&gt; is a cryptographic signature over the &lt;code class=&quot;language-text&quot;&gt;NarHash&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this information, the client can check that this binary really comes from the provider’s Nix store.&lt;/p&gt;
&lt;h2&gt;What are the limitations of this model?&lt;/h2&gt;
&lt;p&gt;While this model has served Nix and others well for many years it suffers from a few problems.
All of these problems can be traced back to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_point_of_failure&quot;&gt;single point of failure&lt;/a&gt; in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Chain_of_trust&quot;&gt;chain of trust&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, if the key used by cache.nixos.org is ever compromised, all builds that were ever added to the cache can be considered tainted.&lt;/li&gt;
&lt;li&gt;Second, one needs to put either full trust or no trust at all in the build machines of a binary cache — there is no middle ground.&lt;/li&gt;
&lt;li&gt;Finally, there is no inherent guarantee that the build inputs described in the Nix expressions were actually used to build what’s in the cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Trustix&lt;/h2&gt;
&lt;p&gt;Trustix aims to solve these problems by assembling a mapping from build inputs to (hashes of) build outputs provided by many build machines.&lt;/p&gt;
&lt;p&gt;Instead of relying on verifying packages signatures, like the traditional Nix model does, Trustix only exposes packages that it considers trustworthy.
Concretely, Trustix is configured as a proxy for a binary cache, and hides the packages which are not trustworthy.
As far as Nix is concerned, the package not being trustworthy is exactly as if the package wasn’t stored in the binary cache to begin with.
If such a package is required, Nix will therefore build it from source.&lt;/p&gt;
&lt;p&gt;Trustix doesn’t define what a trustworthy package is.
What your Trustix considers trustworthy is up to you.
The rules for accepting packages are entirely configurable.
In fact, in the current prototype, there isn’t a default rule for packages to count as trustworthy: you need to configure trustworthiness yourself.&lt;/p&gt;
&lt;p&gt;With this in mind, let’s revisit the above issues&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In Trustix, if an entity is compromised, you can rely on all
other entities in the network to establish that a binary artefact is
trustworthy. Maybe a few hashes are wrong in the Trustix mapping,
but if an overwhelming majority of the outputs are the same, you can
trust that the corresponding artefact is indeed what you would have
built yourself.&lt;/p&gt;
&lt;p&gt;Therefore you never need to invalidate an entire binary cache: you
can still verify the trustworthiness of old packages, even if newer
packages are built by a malicious actor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Trustix, you never typically consider any build machine to be
fully trusted. You always check their results against the other
build machines. You can further configure this by considering some
machines as more trusted (maybe because it is a community-operated
machine, and you trust said community) or less trusted (for instance,
because it has been compromised in the past, and you fear it may be
compromised again).&lt;/p&gt;
&lt;p&gt;Moreover, in the spirit of having no single point of failure,
Trustix’s mapping is not kept in a central database. Instead every
builder keeps a log of its builds; these logs are aggregated on your
machine by your instance of the Trustix daemon. Therefore even the
mapping itself doesn’t have to be fully trusted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;In Trustix, package validity is not ensured by a signature scheme.
Instead Trustix relies on the consistency of the input to output
mapping. As a consequence, the validity criterion, contrary to a
signature scheme, links the output to the input. It makes it
infeasible to pass the build result of input &lt;code class=&quot;language-text&quot;&gt;I&lt;/code&gt; as a build result for
input &lt;code class=&quot;language-text&quot;&gt;J&lt;/code&gt;: it would require corrupting the entire network.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Limitations: reproducibility tracking and non-reproducible builds&lt;/h2&gt;
&lt;p&gt;A system like Trustix will not work well with builds that are non-reproducible, which is a limitation of this model.
After all, you cannot reach consensus if everyone’s opinions differ.&lt;/p&gt;
&lt;p&gt;However, Trustix can still be useful, even for non-reproducible builds!
By accumulating all the data in the various logs and aggregating them, we can track which derivations are non-reproducible over all of Nixpkgs, in a way that is easier than previously possible.
Whereas the &lt;a href=&quot;https://r13y.com/&quot;&gt;r13y project&lt;/a&gt; builds a single closure
on a single machine, Trustix will index &lt;em&gt;everything ever built&lt;/em&gt; on every
architecture.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I am very excited to be working on the next generation of tooling for trust and reproducibility, and for the purely functional software packaging model pioneered by Nix to keep enabling new use cases.
I hope that this work can be a foundation for many other applications other than improving trust — for example, by enabling the Nix community to support new CPU architectures with community binary caches.&lt;/p&gt;
&lt;p&gt;Please check out the code at the &lt;a href=&quot;https://github.com/tweag/trustix&quot;&gt;repo&lt;/a&gt; or join us for a chat over in &lt;code class=&quot;language-text&quot;&gt;#untrustix&lt;/code&gt; on &lt;a href=&quot;https://webchat.freenode.net/&quot;&gt;Freenode&lt;/a&gt;.
And stay tuned — in the next blog post, we will talk more about Merkle trees and how they are used in Trustix.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nlnet.nl/&quot;&gt;&lt;span class=&quot;gatsby-resp-image-wrapper&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;&gt;
      &lt;span class=&quot;gatsby-resp-image-background-image&quot; style=&quot;display: block;&quot;&gt;&lt;/span&gt;
  &lt;img alt=&quot;NLNet&quot; class=&quot;gatsby-resp-image-image&quot; src=&quot;https://www.tweag.io/static/efbf832b18623ce0246865138f7e61e9/fc2a6/nlnet-banner.png&quot; style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle;&quot; title=&quot;NLNet&quot; /&gt;
    &lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nlnet.nl/NGI0&quot;&gt;&lt;span class=&quot;gatsby-resp-image-wrapper&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;&gt;
      &lt;span class=&quot;gatsby-resp-image-background-image&quot; style=&quot;display: block;&quot;&gt;&lt;/span&gt;
  &lt;img alt=&quot;NGI0&quot; class=&quot;gatsby-resp-image-image&quot; src=&quot;https://www.tweag.io/static/b817c1323bb0eb39e2cace92a3e9a410/9b7bd/NGI0_tag.png&quot; style=&quot;width: 100%; height: 100%; margin: 0; vertical-align: middle;&quot; title=&quot;NGI0&quot; /&gt;
    &lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Tweag I/O: Self-references in a content-addressed Nix</title>
	<guid isPermaLink="true">https://tweag.io/blog/2020-11-18-nix-cas-self-references/</guid>
	<link>https://tweag.io/blog/2020-11-18-nix-cas-self-references/</link>
	<description>&lt;p&gt;In a &lt;a href=&quot;https://www.tweag.io/blog/2020-09-10-nix-cas/&quot;&gt;previous post&lt;/a&gt; I explained why we were eagerly trying to change the Nix store model to allow for content-addressed derivations.
I also handwaved that this was a real challenge, but without giving any hint at &lt;strong&gt;why&lt;/strong&gt; this could be tricky.
So let’s dive a bit into the gory details and understand some of the conceptual pain points with content-addressability in Nix, which forced us to some trade-offs in how we handle content-addressed paths.&lt;/p&gt;
&lt;h1&gt;What are self-references?&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;self&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a self-reference&lt;/p&gt;
&lt;p&gt;— &lt;cite&gt;Théophane Hufschmitt, &lt;a href=&quot;https://www.tweag.io/rss-nix.xml#self&quot;&gt;This very article&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A very trivial Nix derivation might look like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-nix&quot;&gt;&lt;code class=&quot;language-nix&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;nixpkgs&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
writeScript &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;''
#!&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token antiquotation variable&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;bash&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;/bin/bash

${hello}/bin/hello
''&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result of this derivation will be an executable file containing a script that will run the &lt;code class=&quot;language-text&quot;&gt;hello&lt;/code&gt; program.
It will depend on the &lt;code class=&quot;language-text&quot;&gt;bash&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;hello&lt;/code&gt; derivations as we refer to them in the file.&lt;/p&gt;
&lt;p&gt;We can build this derivation and execute it:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-console&quot;&gt;&lt;code class=&quot;language-console&quot;&gt;$ nix-build hello.nix
$ ./result
Hello, world!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far, so good.
Let’s now change our derivation to change the prompt of &lt;code class=&quot;language-text&quot;&gt;hello&lt;/code&gt; to something more personalized:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-nix&quot;&gt;&lt;code class=&quot;language-nix&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;nixpkgs&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
writeScript &lt;span class=&quot;token string&quot;&gt;&quot;hello-its-me&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;''
#!&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token antiquotation variable&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;bash&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;/bin/bash

echo &quot;Hello, world! This is &lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token antiquotation variable&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;placeholder &lt;span class=&quot;token string&quot;&gt;&quot;out&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&quot;
''&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code class=&quot;language-text&quot;&gt;${placeholder &quot;out&quot;}&lt;/code&gt; is a magic value that will be replaced by the output path of the derivation during the build.&lt;/p&gt;
&lt;p&gt;We can build this and run the result just fine&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-console&quot;&gt;&lt;code class=&quot;language-console&quot;&gt;$ nix-build hello-its-me.nix
$ ./result
Hello, world! This is /nix/store/c0qw0gbp7rfyzm7x7ih279pmnzazg86p-hello-its-me&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can check that the file is indeed who it claims to be:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-console&quot;&gt;&lt;code class=&quot;language-console&quot;&gt;$ /nix/store/c0qw0gbp7rfyzm7x7ih279pmnzazg86p-hello-its-me
Hello, world! This is /nix/store/c0qw0gbp7rfyzm7x7ih279pmnzazg86p-hello-its-me&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the &lt;code class=&quot;language-text&quot;&gt;hello&lt;/code&gt; derivation depends on &lt;code class=&quot;language-text&quot;&gt;bash&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;hello&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;hello-its-me&lt;/code&gt; depends on &lt;code class=&quot;language-text&quot;&gt;bash&lt;/code&gt; and… itself.
This is something rather common in Nix.
For example, it’s rather natural for a C program to have &lt;code class=&quot;language-text&quot;&gt;/nix/store/xxx-foo/bin/foo&lt;/code&gt; depend of &lt;code class=&quot;language-text&quot;&gt;/nix/store/xxx-foo/lib/libfoo.so&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Self references and content-addressed paths&lt;/h1&gt;
&lt;p&gt;How do we build a content-addressed derivation &lt;code class=&quot;language-text&quot;&gt;foo&lt;/code&gt; in Nix? The recipe is rather simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build the derivation in a temporary directory &lt;code class=&quot;language-text&quot;&gt;/some/where/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Compute the hash &lt;code class=&quot;language-text&quot;&gt;xxx&lt;/code&gt; of that &lt;code class=&quot;language-text&quot;&gt;/some/where/&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Move the directory under &lt;code class=&quot;language-text&quot;&gt;/nix/store/xxx-foo/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You might see where things will go wrong with self-references: the reference will point to &lt;code class=&quot;language-text&quot;&gt;/some/where&lt;/code&gt; rather than &lt;code class=&quot;language-text&quot;&gt;/nix/store/xxx-foo&lt;/code&gt;, and so will be wrong (in addition to leak a path to what should just be a temporary directory).&lt;/p&gt;
&lt;p&gt;To work around that, we would need to compute this &lt;code class=&quot;language-text&quot;&gt;xxx&lt;/code&gt; hash before the build, but that’s quite impossible as the hash depends on the content of the directory, including the value of the self-references.&lt;/p&gt;
&lt;p&gt;However, we can hack our way around it in most cases by allowing ourselves a bit of heuristic.
The only assumption that we need to make is that all the
self-references will appear textually (&lt;em&gt;i.e.&lt;/em&gt; running &lt;code class=&quot;language-text&quot;&gt;strings&lt;/code&gt; on a
file that contains self-references will print all the self-references out).&lt;/p&gt;
&lt;p&gt;Under that assumption, we can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build the derivation in our &lt;code class=&quot;language-text&quot;&gt;/some/where&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;Replace all the occurrences of a self-reference by a magic value&lt;/li&gt;
&lt;li&gt;Compute the hash of the resulting path to determine the final path&lt;/li&gt;
&lt;li&gt;Replace all the occurrences of the magic value by the final path&lt;/li&gt;
&lt;li&gt;Move the resulting store path to its final path&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you might think that this is a crazy hack − there’s so many ways it could break.
And in theory you’ll be right.
But, surprisingly, this works remarkably well in practice.
You might also notice that &lt;em&gt;pedantically speaking&lt;/em&gt; this scheme isn’t exactly content-addressing because of the “modulo the final hash” part.
But this is close-enough to keep all the desirable properties of proper content addressing, while also enabling self-references, which wouldn’t be possible otherwise.
For example, the Fugue cloud deployment system used &lt;a href=&quot;https://www.fugue.co/blog/2016-05-18-cryptographic-hashes-and-dependency-cycles.html&quot;&gt;a generalisation
of this technique&lt;/a&gt; which not only deals with
self-references, but with reference cycles of arbitrary length.&lt;/p&gt;
&lt;p&gt;However, there’s a key thing that’s required for this to work: patching strings in binaries is generally benign, but the final string must have the same length as the original one.
But we can do that: we don’t know what the final &lt;code class=&quot;language-text&quot;&gt;xxx&lt;/code&gt; hash will be, but we know its length (because it’s a fixed-length hash), so we can just choose a temporary directory that has the right length (like a temporary store path with the same name), and we’re all set!&lt;/p&gt;
&lt;p&gt;The annoying thing is that there’s no guarantee that there are no self-references hidden in such a way that a textual replacement won’t catch it (for example inside a compressed zip file).
This is the main reason why content-addressability will not be the default in Nix, at first at least.&lt;/p&gt;
&lt;h1&gt;Non-deterministic builds − the diamond problem strikes back&lt;/h1&gt;
&lt;p&gt;No matter how hard Nix tries to isolate the build environment, some actions will remain inherently non-deterministic − anything that can yield a different output depending on the order in which concurrent tasks will be executed for example.
This is an annoyance as it might prevent &lt;em&gt;early cutoff&lt;/em&gt; (see &lt;a href=&quot;https://www.tweag.io/blog/2020-09-10-nix-cas/&quot;&gt;our previous article on the subject&lt;/a&gt; in case you missed it).&lt;/p&gt;
&lt;p&gt;But more than limiting the efficiency of the cache, this could also
hurt the correctness of Nix if we’re not careful enough.&lt;/p&gt;
&lt;p&gt;For example, consider the following dependency graph:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Dependency graph for foo&quot; src=&quot;https://www.tweag.io/ed2e0194aec593229aefb7d515af8dea/foo-dependency-graph.svg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Alice wants to get &lt;code class=&quot;language-text&quot;&gt;foo&lt;/code&gt; installed.
She already built &lt;code class=&quot;language-text&quot;&gt;lib0&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;lib1&lt;/code&gt; locally.
Let’s call them &lt;code class=&quot;language-text&quot;&gt;lib0_a&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;lib1_a&lt;/code&gt;.
The binary cache contains builds of &lt;code class=&quot;language-text&quot;&gt;lib0&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;lib2&lt;/code&gt;.
Let’s call them &lt;code class=&quot;language-text&quot;&gt;lib0_b&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;lib2_b&lt;/code&gt;.
Because the build of &lt;code class=&quot;language-text&quot;&gt;lib0&lt;/code&gt; is not deterministic, &lt;code class=&quot;language-text&quot;&gt;lib0_a&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;lib0_b&lt;/code&gt; are different — and so have a different hash.
In a content-addressed word, that means they will be stored in different paths.&lt;/p&gt;
&lt;p&gt;A simple cache implementation would want to fetch &lt;code class=&quot;language-text&quot;&gt;lib2_b&lt;/code&gt; from the cache and use it to build &lt;code class=&quot;language-text&quot;&gt;foo&lt;/code&gt;.
This would also pull &lt;code class=&quot;language-text&quot;&gt;lib0_b&lt;/code&gt;, because it’s a dependency of &lt;code class=&quot;language-text&quot;&gt;lib2_b&lt;/code&gt;.
But that would mean that &lt;code class=&quot;language-text&quot;&gt;foo&lt;/code&gt; would depend on both &lt;code class=&quot;language-text&quot;&gt;lib0_a&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;lib0_b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Buggy runtime dependency graph for foo&quot; src=&quot;https://www.tweag.io/1c4871115391af30e3309771a32df899/foo-runtime-dependency-graph.svg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In the happy case this would just be a waste of space − the dependency is duplicated, so we use twice as much memory to store it.
But in many cases this would simply blow-up at some point — for example if &lt;code class=&quot;language-text&quot;&gt;lib0&lt;/code&gt; is a shared library, the C linker will fail because of the duplicated symbols.
Besides that, this breaks down the purity of the build as we get a different behavior depending on what’s already in the store at the start of the build.&lt;/p&gt;
&lt;h2&gt;Getting out of this&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://edolstra.github.io/pubs/phd-thesis.pdf&quot;&gt;Nix’s foundational paper&lt;/a&gt; shows a way out of this by rewriting hashes in substituted paths.
This is however quite complex to implement for a first version, so the current implementation settles down on a simpler (though not optimal) behavior where we only allow one build for each derivation.
In the example above, &lt;code class=&quot;language-text&quot;&gt;lib0&lt;/code&gt; has already been instantiated (as &lt;code class=&quot;language-text&quot;&gt;lib0_a&lt;/code&gt;), so we don’t allow pulling in &lt;code class=&quot;language-text&quot;&gt;lib0_b&lt;/code&gt; (nor &lt;code class=&quot;language-text&quot;&gt;lib1_b&lt;/code&gt;) and we rebuild both &lt;code class=&quot;language-text&quot;&gt;lib1&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;foo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While not optimal − we’ll end-up rebuilding &lt;code class=&quot;language-text&quot;&gt;foo&lt;/code&gt; even if it’s already in the binary cache − this solution has the advantage of preserving correctness while staying conceptually and technically simple.&lt;/p&gt;
&lt;h1&gt;What now?&lt;/h1&gt;
&lt;p&gt;Part of this &lt;a href=&quot;https://github.com/NixOS/nix/pulls?q=is%3Apr+label%3Aca-derivations+is%3Aclosed&quot;&gt;has already been implemented&lt;/a&gt; but there’s still &lt;a href=&quot;https://github.com/NixOS/nix/issues?q=is%3Aopen+is%3Aissue+label%3Aca-derivations&quot;&gt;quite a long way forward&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope for it to be usable (though maybe still experimental) for Nix 3.0.&lt;/p&gt;
&lt;p&gt;And in the meantime stay tuned with &lt;a href=&quot;https://discourse.nixos.org/t/tweag-nix-dev-update-4/9862&quot;&gt;our regular updates on discourse&lt;/a&gt;.
Or wait for the next blog post that will explain another change that will be necessary — one that is less fundamental, but more user-facing.&lt;/p&gt;</description>
	<pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Cachix: Write access control for binary caches</title>
	<guid isPermaLink="true">https://blog.cachix.org/posts/2020-11-09-write-access-control-for-binary-caches/</guid>
	<link>https://blog.cachix.org/posts/2020-11-09-write-access-control-for-binary-caches/</link>
	<description>As Cachix is growing, I have noticed a few issues along the way: Signing keys are still the best way to upload content and not delegate trust to Cachix, but users have also found that they can be difficult to manage, particularly if the secret key needs to be rotated.
At this point, the best option is to clear out the cache completely, and re-sign everything with a newly generated key.</description>
	<pubDate>Tue, 10 Nov 2020 11:00:00 +0000</pubDate>
	<author>support@cachix.org (Domen Kožar)</author>
</item>
<item>
	<title>Tweag I/O: Nickel: better configuration for less</title>
	<guid isPermaLink="true">https://tweag.io/blog/2020-10-22-nickel-open-sourcing/</guid>
	<link>https://tweag.io/blog/2020-10-22-nickel-open-sourcing/</link>
	<description>&lt;p&gt;We are making the &lt;a href=&quot;https://www.github.com/tweag/nickel&quot;&gt;Nickel&lt;/a&gt; repository public. Nickel is an experimental configuration
language developed at Tweag. While this is not the time for the first
release yet, it is an occasion to talk about this project. The goal of this
post is to give a high-level overview of the project. If your curiosity is tickled
but you are left wanting to learn more, fear not, as we will publish
more blog posts on specific aspects of the language in the future. But for
now, let’s have a tour!&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Disclaimer&lt;/strong&gt;: the actual syntax of Nickel being still worked on, I’m freely
using as-of-yet non-existing syntax for illustrative purposes. The underlying
features are however already supported.]&lt;/p&gt;
&lt;h2&gt;The inception&lt;/h2&gt;
&lt;p&gt;We, at Tweag, are avid users of the &lt;a href=&quot;https://nixos.org/&quot;&gt;Nix&lt;/a&gt; package manager. As it
happens, the configuration language for Nix (also called Nix) is
a pretty good configuration language, and would be applicable to many
more things than just package management.&lt;/p&gt;
&lt;p&gt;All in all, the Nix language is a lazy JSON with functions. It is
simple yet powerful. It is used to generate Nix’s package descriptions
but would be well
suited to write any kind of configuration (&lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;,
&lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;, etc…).&lt;/p&gt;
&lt;p&gt;The rub is that the interpreter for Nix-the-language is tightly
coupled with Nix-the-package manager. So, as it stands, using the
Nix language for anything else than package management is a rather
painful exercise.&lt;/p&gt;
&lt;p&gt;Nickel is our attempt at answering the question: what would
Nix-the-language look like if it was split from the package manager?
While taking the opportunity to improve the language a little,
building on the experience of the Nix community over the years.&lt;/p&gt;
&lt;h2&gt;What’s Nickel, exactly ?&lt;/h2&gt;
&lt;p&gt;Nickel is a lightweight generic configuration language. In that it can
replace YAML as your application’s configuration language. Unlike
YAML, though, it anticipates large configurations by being
programmable. Another way to use Nickel is to generate static
configuration files — &lt;em&gt;e.g.&lt;/em&gt; in JSON, YAML — that are then fed to another system. Like
Nix, it is designed to have a simple, well-understood core: at its
heart, it is JSON with functions.&lt;/p&gt;
&lt;p&gt;But past experience with Nix also brings some insights on which aspects of the
language could be improved. Whatever the initial scope of a language is, it will
almost surely be used in a way that deviates from the original plan: you create
a configuration language to describe software packages, and next thing you know,
somebody needs to implement a &lt;a href=&quot;https://github.com/NixOS/nixpkgs/pull/11484&quot;&gt;topological sort&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nickel strives to retain the simplicity of Nix, while extending it
according to this feedback.
Though, you can do perfectly fine without the new features and just write Nix-like code.&lt;/p&gt;
&lt;h2&gt;Yet another configuration language&lt;/h2&gt;
&lt;p&gt;At this point you’re probably wondering if this hasn’t already been done elsewhere.
It seems that more and more languages are born every day, and surely there
already exist configuration languages with a similar purpose to Nickel:
&lt;a href=&quot;https://github.com/bazelbuild/starlark&quot;&gt;Starlark&lt;/a&gt;, &lt;a href=&quot;https://jsonnet.org/&quot;&gt;Jsonnet&lt;/a&gt;, &lt;a href=&quot;https://dhall-lang.org/&quot;&gt;Dhall&lt;/a&gt; or &lt;a href=&quot;https://cuelang.org/&quot;&gt;CUE&lt;/a&gt;, to name
a few. So why Nickel?&lt;/p&gt;
&lt;h2&gt;Typing&lt;/h2&gt;
&lt;p&gt;Perhaps the most important difference with other configuration languages is
Nickel’s approach to typing.&lt;/p&gt;
&lt;p&gt;Some languages, such as &lt;a href=&quot;https://jsonnet.org/&quot;&gt;Jsonnet&lt;/a&gt; or &lt;a href=&quot;https://github.com/bazelbuild/starlark&quot;&gt;Starlark&lt;/a&gt;, are not
statically typed. Indeed, static types can be seen as superflous in a configuration
language: if your program is only run once on fixed inputs, any type error will
be reported at run-time anyway. Why bother with a static type system?&lt;/p&gt;
&lt;p&gt;On the other hand, more and more systems rely on complex configurations, such as
cloud infrastructure (&lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;, &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; or
&lt;a href=&quot;https://github.com/NixOS/nixops&quot;&gt;NixOps&lt;/a&gt;), leading the corresponding programs to become increasingly
complex, to the point where static types are beneficial. For reusable code —
that is, library functions — static types add structure, serve as
documentation, and eliminate bugs early.&lt;/p&gt;
&lt;p&gt;Although less common, some configuration languages are statically typed,
including &lt;a href=&quot;https://dhall-lang.org/&quot;&gt;Dhall&lt;/a&gt; and &lt;a href=&quot;https://cuelang.org/&quot;&gt;CUE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dhall features a powerful type system that is able to type a wide range of
idioms. But it is complex, requiring some experience to become fluent in.&lt;/p&gt;
&lt;p&gt;CUE is closer to what we are striving for. It has an optional and well-behaved
type system with strong guarantees. In exchange for which, one can’t write nor
type higher-order functions in general, even if some simple functions are
possible to encode.&lt;/p&gt;
&lt;h3&gt;Gradual typing&lt;/h3&gt;
&lt;p&gt;Nickel, features a &lt;a href=&quot;https://en.wikipedia.org/wiki/Gradual_typing&quot;&gt;&lt;em&gt;gradual type system&lt;/em&gt;&lt;/a&gt;.
Gradual types are unobtrusive: they make it possible to statically
type reusable parts of your programs, but you are still free to write
configurations without any types. The
interpreter safely handles the interaction between the typed and untyped worlds.&lt;/p&gt;
&lt;p&gt;Concretely, typed library code like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// file: mylib.ncl
{
  numToStr : Num -&amp;gt; Str = fun n =&amp;gt; ...;
  makeURL : Str -&amp;gt; Str -&amp;gt; Num -&amp;gt; Str = fun proto host port =&amp;gt;
    &quot;${proto}://${host}:${numToStr port}/&quot;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can coexist with untyped configuration code like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// file: server.ncl
let mylib = import &quot;mylib.ncl&quot; in
let host = &quot;myproject.com&quot; in
{
  host = host;
  port = 1;
  urls = [
    mylib.makeURL &quot;myproto&quot; host port,
    {protocol = &quot;proto2&quot;; server = &quot;sndserver.net&quot;; port = 4242}
  ];
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the first snippet, the body of &lt;code class=&quot;language-text&quot;&gt;numToStr&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;makeURL&lt;/code&gt; are statically
checked: wrongfully calling &lt;code class=&quot;language-text&quot;&gt;numToStr proto&lt;/code&gt; inside &lt;code class=&quot;language-text&quot;&gt;makeURL&lt;/code&gt; would raise an
error even if &lt;code class=&quot;language-text&quot;&gt;makeURL&lt;/code&gt; is never used. On the other hand, the second snippet is
not annotated, and thus not statically checked. In particular, we mix an URL
represented as a string together with one represented as a record in the same
list. The interpreter rather inserts run-time checks, or &lt;em&gt;contracts&lt;/em&gt;, such
that if &lt;code class=&quot;language-text&quot;&gt;makeURL&lt;/code&gt; is misused then the program fails with an
appropriate error.&lt;/p&gt;
&lt;p&gt;Gradual types also lets us keep the type system simple: even in
statically typed code if you want to write a component that the type
checker doesn’t know how to verify, you don’t have to type-check that
part.&lt;/p&gt;
&lt;h3&gt;Contracts&lt;/h3&gt;
&lt;p&gt;Complementary to the static type system, Nickel offers &lt;em&gt;contracts&lt;/em&gt;. Contracts
offer precise and accurate dynamic type error reporting, even in the
presence of function types. Contracts are used internally by
Nickel’s interpreter to insert guards at the boundary between typed and untyped
chunks. Contracts are available to the programmer as well, to give them the
ability to enforce type assertions at run-time in a simple way.&lt;/p&gt;
&lt;p&gt;One pleasant consequence of this design is that the exposure of the user to the
type system can be progressive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users writing configurations can just write Nix-like code while ignoring
(almost) everything about typing, since you can seamlessly call a typed
function from untyped code.&lt;/li&gt;
&lt;li&gt;Users writing consumers or verifiers of these configurations would use
contracts to model data schemas.&lt;/li&gt;
&lt;li&gt;Users writing libraries would instead use the static type
system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example of contract is given in the next section.&lt;/p&gt;
&lt;h2&gt;Schemas&lt;/h2&gt;
&lt;p&gt;While the basic computational blocks are functions, the basic data blocks in
Nickel are records (or objects in JSON). Nickel supports writing self-documenting
record schemas, such as:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  host | type: Str
       | description: &quot;The host name of the server.&quot;
       | default: &quot;fallback.myserver.net&quot;
  ;

  port | type: Num
       | description: &quot;The port of the connection.&quot;
       | default: 4242
  ;

  url | type: Url
      | description: &quot;The host name of the server.&quot;
  ;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each field can contain metadata, such as a description or default
value. These aim at being displayed in documentation, or queried by
tools.&lt;/p&gt;
&lt;p&gt;The schema can then be used as a contract. Imagine that a function has
swapped two values in its output and returns:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  host = &quot;myproject.com&quot;,
  port = &quot;myproto://myproject.com:1/&quot;,
  url = 1
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without types, this is hard to catch. Surely, an error will eventually pop up
downstream in the pipeline, but how and when? Using the schema above
will make sure that, whenever the fields are actually evaluated, the
function will be blamed in the type error.&lt;/p&gt;
&lt;p&gt;Schemas are actually part of a bigger story involving merging records
together, which, in particular, lets the schema instantiate missing
fields with their default values. It is very much inspired by the
&lt;a href=&quot;https://nixos.org/manual/nixos/stable/index.html#sec-configuration-syntax&quot;&gt;NixOs module system&lt;/a&gt; and the &lt;a href=&quot;https://cuelang.org/&quot;&gt;CUE&lt;/a&gt; language, but
it is a story for another time.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope that I gave you a sense of what Nickel is trying to achieve. I
only presented its most salient aspects: its gradual type system with
contracts, and built-in record schemas. But there is more to explore!
The language is not ready to be used in real world applications yet, but a good
share of the design presented here is implemented. If you are curious about it,
&lt;a href=&quot;https://www.github.com/tweag/nickel&quot;&gt;check it out&lt;/a&gt;!&lt;/p&gt;</description>
	<pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Cachix: Changes to Garbage Collection</title>
	<guid isPermaLink="true">https://blog.cachix.org/posts/2020-10-01-changes-to-garbage-collection/</guid>
	<link>https://blog.cachix.org/posts/2020-10-01-changes-to-garbage-collection/</link>
	<description>Based on your feedback, I have made the following two changes:
  When downloading &amp;lt;store-hash&amp;gt;.narinfo the timestamp of last access is updated, previously this would happen only with nar archives.
This change allows tools like nix-build-uncached to prevent unneeded downloads and playing nicely with Cachix garbage collection algorithm!
  Previously, the algorithm ordered paths first by last accessed timestamp and then by creation timestamp.
That worked well until you had all entries with last accessed and all newly created store paths will get deleted first.</description>
	<pubDate>Thu, 01 Oct 2020 09:00:00 +0000</pubDate>
	<author>support@cachix.org (Domen Kožar)</author>
</item>
<item>
	<title>Tweag I/O: Fully statically linked Haskell binaries with Bazel</title>
	<guid isPermaLink="true">https://tweag.io/blog/2020-09-30-bazel-static-haskell/</guid>
	<link>https://tweag.io/blog/2020-09-30-bazel-static-haskell/</link>
	<description>&lt;p&gt;Deploying and packaging Haskell applications can be challenging at times, and
runtime library dependencies are one reason for this. Statically linked
binaries have no such dependencies and are therefore easier to deploy. They
can also be quicker to start, since no dynamic loading is needed. In exchange,
all used symbols must be bundled into the application, which may lead to larger
artifacts.&lt;/p&gt;
&lt;p&gt;Thanks to the contribution of Will Jones of &lt;a href=&quot;https://www.habito.com/&quot;&gt;Habito&lt;/a&gt;&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://www.tweag.io/rss-nix.xml#fn-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;,
&lt;a href=&quot;https://github.com/tweag/rules_haskell&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;rules_haskell&lt;/code&gt;&lt;/a&gt;, the Haskell &lt;a href=&quot;https://bazel.build&quot;&gt;Bazel&lt;/a&gt; extension, has
&lt;a href=&quot;https://github.com/tweag/rules_haskell/pull/1390&quot;&gt;gained support&lt;/a&gt; for fully static linking of Haskell
binaries.&lt;/p&gt;
&lt;p&gt;Habito uses Bazel to develop, build, test and deploy Haskell code in a minimal
Docker container. By building fully-statically-linked binaries, Docker
packaging (using &lt;a href=&quot;https://github.com/bazelbuild/rules_docker&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;rules_docker&lt;/code&gt;&lt;/a&gt;) becomes straightforward and
easy to integrate into existing build workflows. A static binary can also be
&lt;code class=&quot;language-text&quot;&gt;strip&lt;/code&gt;ped once it is built to reduce the size of production artifacts. With
static binaries, what you see (just the binary) is what you get, and this is
powerful.&lt;/p&gt;
&lt;p&gt;In the following, we will discuss the technical challenges of statically
linking Haskell binaries and how these challenges are addressed in
&lt;code class=&quot;language-text&quot;&gt;rules_haskell&lt;/code&gt;. Spoiler alert: Nix is an important part of the solution.
Finally, we will show you how you can create your own fully statically linked
Haskell binaries with Bazel and Nix.&lt;/p&gt;
&lt;h2&gt;Technical challenges&lt;/h2&gt;
&lt;p&gt;Creating fully statically linked Haskell binaries is not without challenges.
The main difficulties for doing so are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not all library dependencies are suited for statically linked binaries.&lt;/li&gt;
&lt;li&gt;Compiling template Haskell requires dynamic libraries on Linux by default.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Library dependencies&lt;/h3&gt;
&lt;p&gt;Like most binaries on Linux, the Haskell compiler GHC is typically configured to
link against the &lt;a href=&quot;https://www.gnu.org/software/libc/&quot;&gt;GNU C library &lt;code class=&quot;language-text&quot;&gt;glibc&lt;/code&gt;&lt;/a&gt;. However, &lt;code class=&quot;language-text&quot;&gt;glibc&lt;/code&gt; is not
designed to support fully static linking and explicitly &lt;a href=&quot;https://sourceware.org/glibc/wiki/FAQ#Even_statically_linked_programs_need_some_shared_libraries_which_is_not_acceptable_for_me.__What_can_I_do.3F&quot;&gt;depends on dynamic
linking&lt;/a&gt; in some use cases. The alternative C library
&lt;a href=&quot;https://musl.libc.org/about.html&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;musl&lt;/code&gt;&lt;/a&gt; is designed to support fully static linking.&lt;/p&gt;
&lt;p&gt;Relatedly, there may be licensing reasons to not link some libraries
statically. Common instances in the Haskell ecosystem are again &lt;code class=&quot;language-text&quot;&gt;glibc&lt;/code&gt; which
is licensed under GPL, and the core Haskell dependency &lt;code class=&quot;language-text&quot;&gt;libgmp&lt;/code&gt; which is
licensed under LGPL. For the latter GHC can be configured to use the core
package &lt;code class=&quot;language-text&quot;&gt;integer-simple&lt;/code&gt; instead of &lt;code class=&quot;language-text&quot;&gt;integer-gmp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately, the Nix community has made &lt;a href=&quot;https://github.com/NixOS/nixpkgs/issues/43795&quot;&gt;great
progress&lt;/a&gt; towards fully statically linked Haskell
binaries and we can build on much of this work in &lt;code class=&quot;language-text&quot;&gt;rules_haskell&lt;/code&gt;. The
&lt;a href=&quot;https://github.com/tweag/rules_nixpkgs&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;rules_nixpkgs&lt;/code&gt;&lt;/a&gt; extension makes it possible to import Nix derivations
into a Bazel project, and &lt;code class=&quot;language-text&quot;&gt;rules_haskell&lt;/code&gt; has first class support for
Nix-provided GHC toolchains using &lt;code class=&quot;language-text&quot;&gt;rules_nixpkgs&lt;/code&gt; under the hood. In
particular, it can import a GHC toolchain based on &lt;code class=&quot;language-text&quot;&gt;musl&lt;/code&gt; from
&lt;a href=&quot;https://github.com/nh2/static-haskell-nix&quot;&gt;static-haskell-nix&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Template Haskell&lt;/h3&gt;
&lt;p&gt;By default GHC is configured to require dynamic libraries when compiling
template Haskell. GHC’s runtime system (RTS) can be built in various
combinations of so called &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/rts/compiler-ways&quot;&gt;ways&lt;/a&gt;. The relevant way in this context is
called &lt;em&gt;dynamic&lt;/em&gt;. On Linux, GHC itself is built with a dynamic RTS. However,
statically linked code is targeting a non-dynamic RTS. This may sound familiar
if you ever tried to compile code using template Haskell in profiling mode. As
the &lt;a href=&quot;https://downloads.haskell.org/ghc/8.10.1/docs/html/users_guide/glasgow_exts.html#using-template-haskell-with-profiling&quot;&gt;GHC user guide&lt;/a&gt; points out, when evaluating template Haskell
splices, GHC will execute compiled expressions in its built-in bytecode
interpreter and this code has to be compatible with the RTS of GHC itself. In
short, a GHC configured with a dynamic RTS will not be able to load static
Haskell libraries to evaluate template Haskell splices.&lt;/p&gt;
&lt;p&gt;One way to solve this issue is to compile all Haskell libraries twice, once
with dynamic linking and once with static linking. C library dependencies will
similarly need to be available in both static and dynamic forms. This is the
approach taken by &lt;code class=&quot;language-text&quot;&gt;static-haskell-nix&lt;/code&gt;. However, in the context of Bazel we
found it preferable to only compile Haskell libraries once in static form and
also only have to provide C libraries in static form. To achieve this we need
to build GHC with a static RTS and to make sure that Haskell code is
compiled as position independent code so that it can be loaded into a running
GHC for template Haskell splices. Thanks to Nix, it is easy to override the GHC
derivation to include the necessary configuration.&lt;/p&gt;
&lt;h2&gt;Make your project fully statically linked&lt;/h2&gt;
&lt;p&gt;How can you benefit from this? In this section we will show how you can setup a
Bazel Haskell project for fully static linking with Nix. For further details
please refer to the corresponding documentation on
&lt;a href=&quot;https://rules-haskell.readthedocs.io/en/latest/haskell-use-cases.html#building-fully-statically-linked-binaries&quot;&gt;haskell.build&lt;/a&gt;. A fully working example repository is
available &lt;a href=&quot;https://github.com/lunaris/minirepo&quot;&gt;here&lt;/a&gt;. For a primer on setting up a Bazel Haskell project
take a look at &lt;a href=&quot;https://www.tweag.io/blog/2020-05-06-convert-haskell-project-to-bazel/&quot;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, you need to configure a Nixpkgs repository that defines a GHC toolchain
for fully static linking based on musl. We start by pulling in a base Nixpkgs
revision and the &lt;code class=&quot;language-text&quot;&gt;static-haskell-nix&lt;/code&gt; project. Create a &lt;code class=&quot;language-text&quot;&gt;default.nix&lt;/code&gt;,
with the following.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-nix&quot;&gt;&lt;code class=&quot;language-nix&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt;
  baseNixpkgs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;builtins&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchTarball&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;nixos-nixpkgs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://github.com/NixOS/nixpkgs/archive/dca182df882db483cea5bb0115fea82304157ba1.tar.gz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    sha256 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0193bpsg1ssr93ihndyv7shz6ivsm8cvaxxl72mc7vfb8d1bwx55&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  staticHaskellNixpkgs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;builtins&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchTarball&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;https://github.com/nh2/static-haskell-nix/archive/dbce18f4808d27f6a51ce31585078b49c86bd2b5.tar.gz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we import a Haskell package set based on &lt;code class=&quot;language-text&quot;&gt;musl&lt;/code&gt; from &lt;code class=&quot;language-text&quot;&gt;static-haskell-nix&lt;/code&gt;.
The package set provides GHC and various Haskell packages. However, we will
only use the GHC compiler and use Bazel to build other Haskell packages.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-nix&quot;&gt;&lt;code class=&quot;language-nix&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt;
  staticHaskellPkgs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;staticHaskellNixpkgs &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/survey/default.nix&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;approachPkgs&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we define a Nixpkgs &lt;a href=&quot;https://nixos.org/nixpkgs/manual/#chap-overlays&quot;&gt;overlay&lt;/a&gt; that introduces a GHC based
on &lt;code class=&quot;language-text&quot;&gt;musl&lt;/code&gt; that is configured to use a static runtime system and core packages
built with position independent code so that they can be loaded for template
Haskell.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-nix&quot;&gt;&lt;code class=&quot;language-nix&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt;
  overlay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; super&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    staticHaskell &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; staticHaskellPkgs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;extend &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;selfSH&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; superSH&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      ghc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;superSH&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ghc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;override &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        enableRelocatedStaticLibs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        enableShared &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;overrideAttrs &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;oldAttrs&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        preConfigure &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;''
          &lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token antiquotation variable&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;oldAttrs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;preConfigure &lt;span class=&quot;token keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
          echo &quot;GhcLibHcOpts += -fPIC -fexternal-dynamic-refs&quot; &amp;gt;&amp;gt; mk/build.mk
          echo &quot;GhcRtsHcOpts += -fPIC -fexternal-dynamic-refs&quot; &amp;gt;&amp;gt; mk/build.mk
        ''&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we extend the base Nixpkgs revision with the overlay. This makes the
newly configured GHC available under the Nix attribute path
&lt;code class=&quot;language-text&quot;&gt;staticHaskell.ghc&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-nix&quot;&gt;&lt;code class=&quot;language-nix&quot;&gt;  args&lt;span class=&quot;token operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; overlays &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;import&lt;/span&gt; baseNixpkgs &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args &lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      overlays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;overlay&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; overlays&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This concludes the Nix part of the setup and we can move on to the Bazel part.&lt;/p&gt;
&lt;p&gt;You can import this Nixpkgs repository into Bazel by adding the following lines
to your &lt;code class=&quot;language-text&quot;&gt;WORKSPACE&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;load&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;@io_tweag_rules_nixpkgs//nixpkgs:nixpkgs.bzl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;nixpkgs_local_repository&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
nixpkgs_local_repository&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;nixpkgs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    nix_file &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;default.nix&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can define a GHC toolchain for &lt;code class=&quot;language-text&quot;&gt;rules_haskell&lt;/code&gt; that uses the Nix built
GHC defined above. Note how we declare that this toolchain has a static RTS and
is configured for fully static linking. Add the following lines to your
&lt;code class=&quot;language-text&quot;&gt;WORKSPACE&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;load&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;@rules_haskell//haskell:nixpkgs.bzl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;haskell_register_ghc_nixpkgs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
haskell_register_ghc_nixpkgs&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    version &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;X.Y.Z&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# Make sure this matches the GHC version.&lt;/span&gt;
    attribute_path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;staticHaskell.ghc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    repositories &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nixpkgs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@nixpkgs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    static_runtime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    fully_static_link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GHC relies on the C compiler and linker during compilation. &lt;code class=&quot;language-text&quot;&gt;rules_haskell&lt;/code&gt;
will always use the C compiler and linker provided by the active Bazel C
toolchain. We need to make sure that we use a musl-based C toolchain as well.
Here we will use the same Nix-provided C toolchain that is used by
static-haskell-nix to build GHC.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;load&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;@io_tweag_rules_nixpkgs//nixpkgs:nixpkgs.bzl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;nixpkgs_cc_configure&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
nixpkgs_cc_configure&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    repository &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;@nixpkgs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    nix_file_content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot;
      with import &amp;lt;nixpkgs&amp;gt; { config = {}; overlays = []; }; buildEnv {
        name = &quot;bazel-cc-toolchain&quot;;
        paths = [ staticHaskell.stdenv.cc staticHaskell.binutils ];
      }
    &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, everything is configured for fully static linking. You can define a
Bazel target for a fully statically linked Haskell binary as follows.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;haskell_binary&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    srcs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Main.hs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    features &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fully_static_link&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can build your binary and confirm that it is fully statically linked as follows.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ bazel build //:example
$ ldd bazel-bin/example
      not a dynamic executable&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you’re interested in further exploring the benefits of fully statically linked
binaries, you might &lt;a href=&quot;https://rules-haskell.readthedocs.io/en/latest/haskell-use-cases.html#containerization-with-rules-docker&quot;&gt;combine them with &lt;code class=&quot;language-text&quot;&gt;rules_docker&lt;/code&gt;&lt;/a&gt; (e.g. through its
&lt;code class=&quot;language-text&quot;&gt;container_image&lt;/code&gt; rule) to build Docker images as Habito have done. With
a rich enough set of Bazel rules and dependency specifications, it’s possible
to reduce your build and deployment workflow to a &lt;code class=&quot;language-text&quot;&gt;bazel test&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;bazel run&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;The current implementation depends on a Nix-provided GHC toolchain capable of
fully static linking that is imported into Bazel using &lt;code class=&quot;language-text&quot;&gt;rules_nixpkgs&lt;/code&gt;.
However, there is no reason why it shouldn’t be possible to use a GHC
distribution capable of fully static linking that was provided by other means,
for example a Docker image such as &lt;a href=&quot;https://github.com/utdemir/ghc-musl&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ghc-musl&lt;/code&gt;&lt;/a&gt;. Get in touch if you
would like to create fully statically linked Haskell binaries with Bazel but
can’t or don’t want to integrate Nix into your build. Contributions are
welcome!&lt;/p&gt;
&lt;p&gt;We thank Habito for their contributions to &lt;code class=&quot;language-text&quot;&gt;rules_haskell&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;  &lt;a href=&quot;https://www.habito.com/&quot;&gt;Habito&lt;/a&gt; is fixing mortgages and making homebuying fit for the
future. Habito gives people tools, jargon-free knowledge and expert support
to help them buy and finance their homes. Built on a rich foundation of
functional programming and other cutting-edge technology, Habito is a long
time user of and contributor to &lt;code class=&quot;language-text&quot;&gt;rules_haskell&lt;/code&gt;.&lt;/p&gt;
&lt;a class=&quot;footnote-backref&quot; href=&quot;https://www.tweag.io/rss-nix.xml#fnref-1&quot;&gt;↩&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
	<pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Tweag I/O: Implicit Dependencies in Build Systems</title>
	<guid isPermaLink="true">https://tweag.io/blog/2020-09-16-implicit-build-dependencies/</guid>
	<link>https://tweag.io/blog/2020-09-16-implicit-build-dependencies/</link>
	<description>&lt;p&gt;In making a build system for your software, you codified the dependencies
between its parts. But, did you account for &lt;em&gt;implicit&lt;/em&gt; software dependencies,
like system libraries and compiler toolchains?&lt;/p&gt;
&lt;p&gt;Implicit dependencies give rise to the biggest and most common problem with
software builds - the lack of &lt;em&gt;hermiticity&lt;/em&gt;. Without hermetic builds,
&lt;em&gt;reproducibility&lt;/em&gt; and &lt;em&gt;cacheability&lt;/em&gt; are lost.&lt;/p&gt;
&lt;p&gt;This post motivates the desire for reproducibility and cacheability, and
explains how we achieve hermetic, reproducible, highly cacheable builds by
taking control of implicit dependencies.&lt;/p&gt;
&lt;h3&gt;Reproducibility&lt;/h3&gt;
&lt;p&gt;Consider a developer newly approaching a code repository. After cloning the
repo, the developer must install a long list of “build requirements” and plod
through multiple steps of “setup”, only to find that, yes indeed, the build
fails. Yet, it worked just fine for their colleague! The developer, typically
not expert in build tooling, must debug the mysterious failure not of their
making. This is bad for morale and for productivity.&lt;/p&gt;
&lt;p&gt;This happens because the build is not &lt;em&gt;reproducible&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One very common reason for the failure is that the compiler toolchain on the
developer’s system is different from that of the colleague. This happens even
with build systems that use sophisticated build software, like &lt;a href=&quot;https://www.tweag.io/blog/tags/bazel&quot;&gt;Bazel&lt;/a&gt;.
Bazel implicitly uses whatever system libraries and compilers are currently
installed in the developer’s environment.&lt;/p&gt;
&lt;p&gt;A common workaround is to provide developers with a Docker image equipped with
a certain compiler toolchain and system libraries, and then to mandate that the
Bazel build occurs in that context.&lt;/p&gt;
&lt;p&gt;That solution has a number of drawbacks. First, if the developer is using
macOS, the virtualized build context runs substantially slower. Second, the
Bazel build cache, developer secrets, and the source code remain outside of the
image and this adds complexity to the Docker invocation. Third, the Docker
image must be rebuilt and redistributed as dependencies change and that’s extra
maintenance. Fourth, and this is the biggest issue, Docker image builds are
themselves not reproducible - they nearly always rely on some external state
that does not remain constant across build invocations, and that means the
build can fail for reasons unrelated to the developer’s code.&lt;/p&gt;
&lt;p&gt;A better solution is to use &lt;a href=&quot;https://www.tweag.io/blog/tags/nix&quot;&gt;Nix&lt;/a&gt; to supply the compiler toolchain and
system library dependencies. Nix is a software package management system
somewhat like Debian’s APT or macOS’s Homebrew. Nix goes much farther to help
developers control their environments. It is unsurpassed when it comes to
reproducible builds of software packages.&lt;/p&gt;
&lt;p&gt;Nix facilitates use of the Nixpkgs package set. That set is &lt;a href=&quot;https://repology.org/repositories/statistics/nonunique&quot;&gt;the largest single
set of software packages&lt;/a&gt;. It is also the &lt;a href=&quot;https://repology.org/repositories/statistics/newest&quot;&gt;freshest&lt;/a&gt; package set. It
provides build instructions that work both on Linux and macOS. Developers can
easily pin any software package at an exact version.&lt;/p&gt;
&lt;p&gt;Learn more about &lt;a href=&quot;https://www.tweag.io/blog/2018-03-15-bazel-nix/&quot;&gt;using Nix with Bazel, here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Cacheability&lt;/h3&gt;
&lt;p&gt;Not only should builds be reproducible, but they should also be fast. Fast
builds are achieved by caching intermediate build results. Cache entries are
keyed based on the precise dependencies as well as the build instructions that
produce the entries. Builds will only benefit from a (shared, distributed)
cache when they have matching dependencies. Otherwise, cache keys (which depend
on the precise dependencies) will be different, and there will be cache misses.
This means that the developer will have to rebuild targets locally. These
unnecessary local rebuilds slow development.&lt;/p&gt;
&lt;p&gt;The solution is to &lt;a href=&quot;https://www.tweag.io/blog/2018-03-15-bazel-nix/&quot;&gt;make the implicit dependencies into explicit ones, again
using Nix&lt;/a&gt;, making sure to configure and use a shared Nix cache.&lt;/p&gt;
&lt;p&gt;Learn more about &lt;a href=&quot;https://www.tweag.io/blog/2020-04-09-bazel-remote-cache/&quot;&gt;configuring a shared Bazel cache, here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;It is important to eliminate implicit dependencies in your build system in
order to retain build reproducibility and cacheability. Identify Nix packages
that can replace the implicit dependencies of your Bazel build and use
&lt;a href=&quot;https://github.com/tweag/rules_nixpkgs&quot;&gt;rules_nixpkgs&lt;/a&gt; to declare them as explicit dependencies. That will yield a
fast, correct, hermetic build.&lt;/p&gt;</description>
	<pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Tweag I/O: Towards a content-addressed model for Nix</title>
	<guid isPermaLink="true">https://tweag.io/blog/2020-09-10-nix-cas/</guid>
	<link>https://tweag.io/blog/2020-09-10-nix-cas/</link>
	<description>&lt;p&gt;This is my first post about content-addressability in Nix — a long-awaited feature that is hopefully coming soon!
In this post I will show you how this feature will improve the Nix
infrastructure. I’ll come back in another post to explain the technical challenges of
adding content-addressability to Nix.&lt;/p&gt;
&lt;p&gt;Nix has a wonderful model for handling packages.
Because each derivation is stored under (aka &lt;em&gt;addressed by&lt;/em&gt;) a unique
name, multiple versions of the same library can coexist on the same
system without issues: each version of the library has a distinct
name, as far as Nix is concerned.&lt;/p&gt;
&lt;p&gt;What’s more, if &lt;code class=&quot;language-text&quot;&gt;openssl&lt;/code&gt; is upgraded in &lt;a href=&quot;https://github.com/NixOS/nixpkgs/&quot;&gt;Nixpkgs&lt;/a&gt;, Nix knows that all the
packages that depend on &lt;code class=&quot;language-text&quot;&gt;openssl&lt;/code&gt; (i.e., almost everything) must be
rebuilt, if only so that they point at the name of the new &lt;code class=&quot;language-text&quot;&gt;openssl&lt;/code&gt;
version. This way, a Nix installation will never feature a package
built for one version of &lt;code class=&quot;language-text&quot;&gt;openssl&lt;/code&gt;, but dynamically linked against
another: as a user, it means that you will never have an &lt;em&gt;undefined
symbol&lt;/em&gt; error. Hurray!&lt;/p&gt;
&lt;h2&gt;The input-addressed store&lt;/h2&gt;
&lt;p&gt;How does Nix achieve this feat? The idea is that the name of a package
is derived from all of its inputs (that is, the complete list of
dependencies, as well as the package description). So if you change
the git tag from which &lt;code class=&quot;language-text&quot;&gt;openssl&lt;/code&gt; is fetched, the name changes, if the
name of &lt;code class=&quot;language-text&quot;&gt;openssl&lt;/code&gt; changes, then the name of any package which has &lt;code class=&quot;language-text&quot;&gt;openssl&lt;/code&gt; in
its dependencies changes.&lt;/p&gt;
&lt;p&gt;However this can be very pessimistic: even changes that aren’t
semantically meaningful can imply mass rebuilding and downloading. As
a slightly extreme example, &lt;a href=&quot;https://github.com/NixOS/nixpkgs/pull/83446&quot;&gt;this merge-request on
Nixpkgs&lt;/a&gt; makes a tiny change to the way &lt;code class=&quot;language-text&quot;&gt;openssl&lt;/code&gt; is built. It doesn’t actually
change &lt;code class=&quot;language-text&quot;&gt;openssl&lt;/code&gt;, yet requires rebuilding an insane amount of
packages. Because, as far as Nix is concerned, all these packages have
different names, hence are different packages. In reality, though,
they weren’t.&lt;/p&gt;
&lt;p&gt;Nevertheless, the cost of the rebuild has to be born by the Nix
infrastructure: &lt;a href=&quot;https://hydra.nixos.org&quot;&gt;Hydra&lt;/a&gt; builds all packages to populate the cache,
and all the newly built packages must be stored. It costs both time,
and money (in cpu power, and storage space).&lt;/p&gt;
&lt;h2&gt;Unnecessary rebuilds?&lt;/h2&gt;
&lt;p&gt;Most distributions, by default, don’t rebuild packages when their dependencies change, and have a (more-or-less automated) process to detect changes that require rebuilding reverse dependencies.
For example, Debian &lt;a href=&quot;https://www.debian.org/doc/debian-policy/policy.pdf#81&quot;&gt;tries to detect ABI changes automatically&lt;/a&gt; and Fedora has a &lt;a href=&quot;https://docs.fedoraproject.org/en-US/fesco/Updates_Policy/&quot;&gt;more manual process&lt;/a&gt;.
But Nix doesn’t.&lt;/p&gt;
&lt;p&gt;The issue is that the notion of a “breaking change” is a very fuzzy one.
Should we follow Debian and consider that only ABI changes are breaking?
This criterion only applies for shared libraries, and as the Debian policy acknowledges, only for “well-behaved” programs.
So if we follow this criterion, there’s still need for manual curation, which is &lt;strong&gt;precisely&lt;/strong&gt; what Nix tries to avoid.&lt;/p&gt;
&lt;h2&gt;The content-addressed model&lt;/h2&gt;
&lt;p&gt;Quite happily, there is a criterion to avoid many useless rebuilds without sacrificing correctness: detecting when changes in a package (or one of its dependencies) yields the exact same output.
That might seem like an edge case, but the &lt;code class=&quot;language-text&quot;&gt;openssl&lt;/code&gt; example above (and many others) shows that there’s a practical application to it.
As another example, &lt;code class=&quot;language-text&quot;&gt;go&lt;/code&gt; depends on &lt;code class=&quot;language-text&quot;&gt;perl&lt;/code&gt; for its tests, so an upgrade of &lt;code class=&quot;language-text&quot;&gt;perl&lt;/code&gt; requires rebuilding all the Go packages in Nixpkgs, although it most likely doesn’t change the output of the &lt;code class=&quot;language-text&quot;&gt;go&lt;/code&gt; derivation.&lt;/p&gt;
&lt;p&gt;But, for Nix to recognise that a package is not a new package, the
new, unchanged, &lt;code class=&quot;language-text&quot;&gt;openssl&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;go&lt;/code&gt; packages must have &lt;em&gt;the same name&lt;/em&gt;
as the old version. Therefore, the name of a package must not be
derived from its inputs which have changed, but, instead, it should be
derived from the content of the compiled package. This is called
content addressing.&lt;/p&gt;
&lt;p&gt;Content addressing is how you can be sure that when you and a
colleague at the other side of the world type &lt;code class=&quot;language-text&quot;&gt;git checkout 7cc16bb8cd38ff5806e40b32978ae64d54023ce0&lt;/code&gt; you actually have the exact
same content in your tree. Git commits are content addressed, therefore the name
&lt;code class=&quot;language-text&quot;&gt;7cc16bb8cd38ff5806e40b32978ae64d54023ce0&lt;/code&gt; refers to that exact
tree.&lt;/p&gt;
&lt;p&gt;Yet another example of content-addressed storage is &lt;a href=&quot;https://ipfs.io/&quot;&gt;IPFS&lt;/a&gt;. In IPFS storage
files can be stored in any number of computers, and even moved from
computer to computer. The content-derived name is used as a way to give
an intrinsic name to a file, regardless of where it is stored.&lt;/p&gt;
&lt;p&gt;In fact, even the particular use case that we are discussing here -
avoiding recompilation when a rebuilt dependency hasn’t changed -
can be found in various build systems such as
&lt;a href=&quot;https://bazel.build/&quot;&gt;Bazel&lt;/a&gt;. In build systems, such recompilation
avoidance is sometimes known as the &lt;em&gt;early cutoff optimization&lt;/em&gt; −
see the &lt;a href=&quot;https://www.microsoft.com/en-us/research/uploads/prod/2018/03/build-systems.pdf&quot;&gt;build systems a la carte paper&lt;/a&gt;
for example).&lt;/p&gt;
&lt;p&gt;So all we need to do is to move the Nix store from an input-addressed
model to a content-addressed model, as used by many tools
already, and we will be able to save a lot of storage space and CPU
usage, by rebuilding many fewer packages. Nixpkgs contributors will
see their CI time improved. It could also allow &lt;a href=&quot;https://github.com/NixOS/nix/issues/859&quot;&gt;serving a binary cache
over IPFS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Well, like many things with computers,
this is actually way harder than it sounds (which explains why this
hasn’t already been done despite being discussed nearly 15 years ago in the
&lt;a href=&quot;https://github.com/edolstra/edolstra.github.io/raw/49a78323f6b319da6e078b4f5f6b3112a30e8db9/pubs/phd-thesis.pdf&quot;&gt;original paper&lt;/a&gt;), but we now believe that there’s &lt;a href=&quot;https://github.com/NixOS/rfcs/pull/62&quot;&gt;a way forward&lt;/a&gt;… more on that in a later post.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A content-addressed store for Nix would help reduce the insane load
that &lt;a href=&quot;https://hydra.nixos.org&quot;&gt;Hydra&lt;/a&gt; has to sustain. While content-addressing is a common technique both in distributed systems
and build systems (Nix is both!), getting to the point where it was
feasible to integrate content-addressing in Nix has been a long journey.&lt;/p&gt;
&lt;p&gt;In a future post, I’ll explain why it was so hard, and how we finally
managed to propose a viable design for a content-addressed Nix.&lt;/p&gt;</description>
	<pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>nixbuild.net: nixbuild.net is Generally Available</title>
	<guid isPermaLink="true">https://blog.nixbuild.net/posts/2020-08-28-nixbuild-net-is-generally-available.html</guid>
	<link>https://blog.nixbuild.net/posts/2020-08-28-nixbuild-net-is-generally-available.html</link>
	<description>&lt;p&gt;Today, &lt;a href=&quot;https://nixbuild.net&quot;&gt;nixbuild.net&lt;/a&gt; is exiting private beta and made generally available! Anyone can now &lt;a href=&quot;https://nixbuild.net#register&quot;&gt;sign up&lt;/a&gt; for a nixbuild.net account and immediately start building using the free CPU hours included with every account.&lt;/p&gt;
&lt;p&gt;After the free CPU hours have been consumed, the pricing is simple: 0.12 EUR (excl. VAT) per CPU hour consumed, billed monthly.&lt;/p&gt;

&lt;p&gt;As part of this GA announcement, a number of marketing and documentation improvements have been published:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A much improved and redesigned landing page at &lt;a href=&quot;https://nixbuild.net&quot;&gt;https://nixbuild.net&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An extensive &lt;a href=&quot;https://nixbuild.net#faq&quot;&gt;FAQ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A reworked &lt;a href=&quot;https://docs.nixbuild.net/getting-started&quot;&gt;Getting Started&lt;/a&gt; guide&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Proper documentation of the &lt;a href=&quot;https://docs.nixbuild.net/nixbuild-shell&quot;&gt;nixbuild.net shell&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;We’re really happy for nixbuild.net to enter this new phase — making simple, performant and scalable remote builds available to every Nix user! We’re excited to see how the service is used, and we have lots of plans for the future of nixbuild.net.&lt;/strong&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate>
	<author>support@nixbuild.net (nixbuild.net)</author>
</item>
<item>
	<title>Tweag I/O: How Nix grew a marketing team</title>
	<guid isPermaLink="true">https://tweag.io/blog/2020-08-20-how-nix-grew-a-marketing-team/</guid>
	<link>https://tweag.io/blog/2020-08-20-how-nix-grew-a-marketing-team/</link>
	<description>&lt;p&gt;Recently I witnessed the moment when a potential Nix user reached eureka.
The moment where everything regarding Nix made sense.
My friend, now a Nix user, screamed from joy: &lt;strong&gt;“We need to Nix–ify everything!”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Moments like these reinforce my belief that Nix is a solution from — and for — the future.
A solution that could reach many more people, only if learning about Nix didn’t demand investing as much time and effort as it does now.&lt;/p&gt;
&lt;p&gt;I think that Nix has the perfect foundation for becoming a success but that it still needs better &lt;em&gt;marketing&lt;/em&gt;.
Many others agree with me, and that’s why we formed the &lt;a href=&quot;https://nixos.org/teams/marketing.html&quot;&gt;Nix marketing team&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I would like to convince you that indeed, marketing is the way to go and that it is worth it.
Therefore, in this post I will share my thoughts on what kind of success we aim for, and which marketing efforts we are currently pursuing.
The marketing team is already giving its first results, and with your input, we can go further.&lt;/p&gt;
&lt;h2&gt;What does success look like?&lt;/h2&gt;
&lt;p&gt;At the time of writing this post, I have been using Nix for 10 years.
I organized one and attended most of the Nix conferences since then, and talked to many people in the community.
All of this does not give me the authority to say what success for Nix looks like, but it does give me a great insight into what we — the Nix community — can agree on.&lt;/p&gt;
&lt;p&gt;Success for Nix would be the next time you encounter a project on GitHub, it would already contain a &lt;code class=&quot;language-text&quot;&gt;default.nix&lt;/code&gt; for you to start developing.
Success for Nix would be the next time you try to run a server on the cloud, NixOS would be offered to you.
Or even more ambitious, would be other communities recognising Nix as a &lt;em&gt;de facto&lt;/em&gt; standard that improves the industry as a whole.&lt;/p&gt;
&lt;p&gt;To some, this success statement may seem very obvious.
However, it is important to say it out loud and often, so we can keep focus, and keep working on the parts of Nix that will contribute the most to this success.&lt;/p&gt;
&lt;h2&gt;The importance of marketing&lt;/h2&gt;
&lt;p&gt;Before we delve into what Nix still lacks, I would like to say that we — engineers and developers — should be aware of our bias against marketing.
This bias becomes clear when we think about what we think are the defining aspects for a project’s success.
We tend to believe that code is everything, and that good code leads to good results.
But what if I tell you that good marketing constitutes more than 50% of the success of a project?
Would you be upset?
We have to overcome this bias, since it prevents us from seeing the big picture.&lt;/p&gt;
&lt;p&gt;Putting aside those Sunday afternoons when I code for the pure joy of stretching my mind, most of the time I simply want to solve a problem.
The joy when seeing others realizing that their problem is not a problem anymore, is one of the best feelings I experienced as a developer.
This is what drives me.
Not the act of coding itself, but the act of solving the problem.
Coding is then only part of the solution.
Others need to know about the existence of your code, understand how it can solve their problem and furthermore they need to know how to use it.&lt;/p&gt;
&lt;p&gt;That is why marketing, and, more generally, non-technical work, is at least as important as technical work.
Documentation, writing blog posts, creating content for the website, release announcements, conference talks, conference booths, forums, chat channels, email lists, demo videos, use cases, swag, search engine optimisation, social media presence, engaging with the community…
These are all crucial parts of any successful project.&lt;/p&gt;
&lt;p&gt;Nix needs better marketing, from a better website to better documentation, along with all the ingredients mentioned above.
If we want Nix to grow as a project we need to improve our marketing game, since this is the area of work that is historically receiving the least amount of attention.
And we are starting to work on it.
In the middle of March 2020, a bunch of us got together and &lt;a href=&quot;https://discourse.nixos.org/t/marketing-team-can-we-present-nix-nixos-better/6249&quot;&gt;announced&lt;/a&gt; the creation of &lt;a href=&quot;https://nixos.org/teams/marketing.html&quot;&gt;the Nix marketing team&lt;/a&gt;.
Since then we meet roughly every two weeks to discuss and work on non-technical challenges that the Nix project is facing.&lt;/p&gt;
&lt;p&gt;But before the Nix marketing team could start doing any actual work we had to answer an important question:&lt;/p&gt;
&lt;h2&gt;What is Nix?&lt;/h2&gt;
&lt;p&gt;I want to argue that the Nix community is still missing an answer to an apparently very simple question: &lt;em&gt;What is Nix?&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The reason why &lt;em&gt;what is Nix?&lt;/em&gt; is a harder question than it may appear at first, is that any complete answer has to tell us &lt;em&gt;what&lt;/em&gt; and &lt;em&gt;who&lt;/em&gt; Nix is for.
Knowing the audience and primary use cases is a precondition to improving the website, documentation, or even Nix itself.&lt;/p&gt;
&lt;p&gt;This is what the Nix marketing team &lt;a href=&quot;https://www.youtube.com/watch?list=PLt4-_lkyRrOOO8CYo5XPx6UI05q8kwhj0&quot;&gt;discussed first&lt;/a&gt;. We identified the following audiences and primary use cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Development environments (audience: developers)&lt;/li&gt;
&lt;li&gt;Deploying to the cloud (audience: system administrators)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It doesn’t mean other use cases are not important — they are.
We are just using the primary use cases as a gateway drug into the rest of the Nix’s ecosystem.
In this way, new users will not be overwhelmed with all the existing options and will have a clear idea where to start.&lt;/p&gt;
&lt;p&gt;Some reasons for selecting the two use cases are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Both use cases are relatively polished solutions.
Clearly, there is still much to be improved, but currently these are the two use cases with the best user experience in the Nix ecosystem.&lt;/li&gt;
&lt;li&gt;One use case is a natural continuation of another.
First, you develop and then you can use the same tools to package and deploy.&lt;/li&gt;
&lt;li&gt;Market size for both use cases is huge, which means there is a big potential.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A differentiating factor — why somebody would choose Nix over others — is Nix’s ability to provide reproducible results.
The promise of reproducibility is the aspect that already attracts the majority of Nix’s user base.
From this, we came up with a slogan for Nix:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Reproducible builds and deploys&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the basic question answered we started working.&lt;/p&gt;
&lt;h2&gt;What has been done so far? How can I help?&lt;/h2&gt;
&lt;p&gt;So far, the Marketing team focused on improving the website:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Moved the website to Netlify.&lt;/strong&gt;
The important part is not switching to Netlify, but separating the website from the Nix infrastructure.
This removes the fear of a website update bringing down parts of Nix infrastructure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simplified navigation.&lt;/strong&gt;
If you remember, the navigation was different for each project that was listed on the website.
We removed the project differentiation and unified navigation.
This will show Nix ecosystem as a unified story and not a collection of projects.
One story is easier to follow than five.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Created a new learn page.&lt;/strong&gt;
Discoverability of documentation was a huge problem.
Links to popular topics in manuals are now more visible.
Some work on entry level tutorials has also started.
Good and beginner friendly learning resources are what is going to create the next generation of Nix users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Created new team pages.&lt;/strong&gt;
We collected information about different official and less official teams working on Nix.
The work here is not done, but it shows that many teams don’t have clear responsibilities.
It shows how decisions are made and invites new Nix users to become more involved with the project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved landing page.&lt;/strong&gt;
Instead of telling the user what Nix is, they will experience it from the start.
The landing page is filled with examples that will convince visitors to give Nix a try.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The work of the marketing team has just started, and there is still a lot to be done.
We are working hard on &lt;a href=&quot;https://github.com/NixOS/nixos-homepage/issues/449&quot;&gt;redesigning the website&lt;/a&gt; and &lt;a href=&quot;https://github.com/NixOS/nixos-homepage/issues/444&quot;&gt;improving the messaging&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/NixOS/nixos-homepage/milestone/1&quot;&gt;roadmap&lt;/a&gt; will tell you more about what to expect next.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If you wish to help&lt;/strong&gt; come and say hi to &lt;a href=&quot;irc://irc.freenode.net/#nixos-marketing&quot;&gt;#nixos-marketing on irc.freenode.org&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Marketing, and non-technical work, is all too often an afterthought for developers. I really wish it weren’t the case.
Having clearly defined problems, audience and strategy should be as important to us as having clean and tested code.
This is important for Nix. This is important for any project that aims to succeed.&lt;/p&gt;</description>
	<pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>nixbuild.net: Build Reuse in nixbuild.net</title>
	<guid isPermaLink="true">https://blog.nixbuild.net/posts/2020-08-13-build-reuse-in-nixbuild-net.html</guid>
	<link>https://blog.nixbuild.net/posts/2020-08-13-build-reuse-in-nixbuild-net.html</link>
	<description>&lt;p&gt;Performance and cost-effectiveness are core values for nixbuild.net. How do you make a Nix build as performant and cheap as possible? The answer is — by not running it at all!&lt;/p&gt;
&lt;p&gt;This post goes into some detail about the different ways nixbuild.net is able to safely reuse build results. The post gets technical, but the main message is that nixbuild.net really tries to avoid building if it can, in order to save time and money for its users.&lt;/p&gt;

&lt;h2 id=&quot;binary-caches&quot;&gt;Binary Caches&lt;/h2&gt;
&lt;p&gt;The most obvious way of reusing build results is by utilising binary caches, and an &lt;a href=&quot;https://blog.nixbuild.net/posts/2020-04-18-binary-cache-support.html&quot;&gt;earlier blog post&lt;/a&gt; described how this is supported by nixbuild.net. In short, if something has been built on &lt;code&gt;cache.nixos.org&lt;/code&gt;, nixbuild.net can skip building it and just fetch it. It is also possible to configure other binary caches to use, and even treat the builds of specific nixbuild.net users in the same way as a trusted binary cache.&lt;/p&gt;
&lt;h2 id=&quot;no-shared-uploads&quot;&gt;No Shared Uploads&lt;/h2&gt;
&lt;p&gt;As part of the Nix remote build protocol, inputs (dependencies) can be uploaded directly to nixbuild.net. Those inputs are not necessarily trustworty, because we don’t know how they were produced. Therefore, those inputs are only allowed to be used by the user who uploaded them. The exception is if the uploaded input had a signature from a binary cache key, then we allow it to be used by all accounts that trust that specific key. Also, if explicit trust has been setup between two accounts, uploaded paths will be shared.&lt;/p&gt;
&lt;h2 id=&quot;derivation-sharing&quot;&gt;Derivation Sharing&lt;/h2&gt;
&lt;p&gt;Another method of reuse, unique to nixbuild.net, is the sharing of build results between users that don’t necessarily trust each other. It works like this:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;When we receive a build request, we get a &lt;a href=&quot;https://nixos.org/nixos/nix-pills/our-first-derivation.html&quot;&gt;derivation&lt;/a&gt; from the user’s Nix client. In essence, this derivation describes what inputs (dependencies) the build needs, and what commands must be run to produce the build output.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The inputs are described in the derivation simply as a list of store paths (&lt;code&gt;/nix/store/abc&lt;/code&gt;, &lt;code&gt;/nix/store/xyz&lt;/code&gt;). The way the Nix remote build protocol works, those store paths have already been provided to us, either because we already had trusted variants of them in our storage, or because we’ve downloaded them from binary caches, or because the client uploaded them to us.&lt;/p&gt;
&lt;p&gt;In order for us to be able to run the build, we need to map the input store paths to the actual file contents of the inputs. This mapping can actually vary even though store paths are the same. This is because a Nix store path does not depend on the &lt;em&gt;contents&lt;/em&gt; of the path, but rather on the &lt;em&gt;dependencies&lt;/em&gt; of the path. So we can very well have multiple versions of the same store path in our storage, because multiple users might have uploaded differing builds of the same paths.&lt;/p&gt;
&lt;p&gt;Anyhow, we will end up with a mapping that depends entirely on what paths the user is allowed to use. So, two users may build the exact same derivation but get different store-path-to-content mappings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At this stage, we store a representation of both the derivation itself, and the mapping described in previous step. Together, these two pieces represent a unique derivation in nixbuild.net’s database.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, we can build the derivation. The build runs inside an isolated, virtualized sandbox that has no network access and nothing other than its inputs inside its filesystem.&lt;/p&gt;
&lt;p&gt;The sandbox is of course vital for keeping your builds secure, but it has another application, too: If we already have built a specific derivation (with a specific set of input content), this build result can be reused for &lt;em&gt;any&lt;/em&gt; user that comes along and requests a build of the exact same derivation with the exact same set of input content.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We do not yet have any numbers on how big impact this type of build result sharing has in practice. The effectiveness will depend on how reproducible the builds are, and of course also on how many users that are likely to build the same derivations.&lt;/p&gt;
&lt;p&gt;For an organization with a large set of custom packages that want to share binary builds with contributors and users, it could turn out useful. The benefit for users is that they don’t actually have to blindly trust a binary cache but instead can be sure that they get binaries that correspond to the nix derivations they have evaluated.&lt;/p&gt;</description>
	<pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
	<author>support@nixbuild.net (nixbuild.net)</author>
</item>

</channel>
</rss>
